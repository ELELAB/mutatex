#!/usr/bin/env python

#    ddg2summary: create summary of interesting mutations
#    Copyright (C) 2015, Matteo Tiberti <matteo.tiberti@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import os
from Bio import PDB
from six import iteritems
from mutatex.utils import *
import numpy as np
import logging as log
import os
import re

def parse_desired_mutations_list(fname, reslist, mutlist):
    """
    parse text file containing the list of interesting mutations according
    to the format specified in the documentation, one per line, It is usually
    [chain ID][residue number][mutated type] (ex: A39Q). Wild type residue can
    optionally be specified (ex: CA39Q) but have no influence in the results.
    Multimer mode is supported and handled automatically.

    Parameters
    ----------
    fname : str
        file name of the input file containing a list of interesting mutations

    reslist : list of tuples
        list of residues identifiers as per the MutateX specification

    reslist : list of str
        list of residue types that specifies the order of mutant residues that
        have been used for the MutateX runs. It's usually the content of the
        mutation_list.txt file

    Returns
    ----------
    list of tuples
        tuples containing the 1) the index of the specified residue in the
        residue list and 2) the index of the specified mutated residue in the
        list of mutated residue types
    """

    mut_pattern = '^[A-Za-z]*([A-Z][0-9]+[A-Za-z])$'
    mut_re = re.compile(mut_pattern)

    processed_reslist = []

    selected_muts = []

    for r in reslist:
        processed_reslist.append( tuple([ ri[1:] for ri in r]))

    try:
        with open(fname) as fh:
            strings = [ str.strip(l) for l in fh.readlines() ]
    except IOError:
        log.error("File %s couldn't be opened" % fname)
        raise IOError

    for s in strings:
        if not s:
            continue
        match = mut_re.match(s)
        if match:
            wt = match.group(1)[:-1]
            mut = match.group(1)[-1]
        else:
            log.warning("Expression %s in mutation list file was not understood, it will be skipped" % s)
            continue

        wt_matches = []

        for ir, r in enumerate(processed_reslist):
            if wt in r:
                wt_matches.append(ir)
        if len(wt_matches) == 0:
            log.warning("Residue %s was not found in the PDB file, it will be skipped" % wt)
            continue
        if len(wt_matches) > 1:
            log.warning("Residues %s was found more than once in the PDB file; it will be skipped0" % wt)

        if mut not in mutlist:
            log.warning("In mutation %s the mutant residue type was not found in the input residue list; it will be skipped" % s)
            continue

        selected_muts.append((wt_matches[0], mutlist.index(mut)))

    return selected_muts

description='ddg2summary: write DDG data of specific mutations in a summary text file'
epilog = """ddg2summary fetches the values of some specific mutations from a MutateX full
mutational scan and writes the respective average values in a text file (-L). The
list of mutations of interested is provided in a mutation list file, one per
line, and they need to be defined according to the following format:

    [wild-type residue type][chain identifier][residue number][mutant residue type]

The wild type residue type is optional. For instnace, QA39C means "residue Q39
of chain A mutated to C". Similarly, A22W means "residue 22 of chain A mutated
to W" """



parser = argparse.ArgumentParser(description=description, epilog=epilog, formatter_class=argparse.RawTextHelpFormatter)
optional = parser._action_groups.pop()
required = parser.add_argument_group('required arguments')

required = init_arguments(['pdb', 'data', 'mutation_list'], required)
required.add_argument("-L","--interest-mutation-list", dest="mutations",  help="List of interesting to be collected")

optional = init_arguments(['multimers'], optional)

options = parser.parse_args()
pdb_parser = PDB.PDBParser()

parser._action_groups.append(optional)
options = parser.parse_args()

try:
    res_ids = get_residue_list(options.in_pdb, multimers=options.multimers)
except IOError:
    exit(1)

try:
    res_order = parse_mutlist_file(options.mutation_list)
except (IOError, TypeError):
    exit(1)

try:
    mutation_list = parse_desired_mutations_list(options.mutations, res_ids, res_order)
except (IOError, TypeError):
    exit(1)

if len(mutation_list) == 0:
    log.error("no usable mutations were found in mutations file; exiting...")
    exit(1)

try:
    with open("summary.txt",'w') as fh:
        for residx, mutidx in mutation_list:
            resname = ",".join([ x + res_order[mutidx] for x in res_ids[residx] ] )
            fname = os.path.join(options.ddg_dir, "_".join(res_ids[residx]))
            ddg = parse_ddg_file(fname, reslist=res_order, full=True)
            ddg_order = np.argsort(ddg[0])
            this_pos = np.where(ddg_order == mutidx)[0][0]
            fh.write("%s\t%.3f\t%.3f\t%.3f\t%.3f\t%d\n" % tuple([resname] + list(ddg.T[mutidx]) + [this_pos + 1]))
except IOError:
    log.error("couldn't write output file, exiting...")
