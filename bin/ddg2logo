#!/usr/bin/env python

#    ddg2logo: plot MutateX DDGs as logo plots
#    Copyright (C) 2019, Matteo Tiberti <matteo.tiberti@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import base64
from io import BytesIO
from six import iteritems
import csv
import matplotlib
matplotlib.use('Agg')
matplotlib.rcParams['savefig.format'] = 'pdf'
matplotlib.rcParams['hatch.linewidth'] = 0.5
from matplotlib.image import imread
from matplotlib import pyplot as plt
from Bio import PDB
from six import iteritems
from mutatex.utils import *
from mutatex.letters import letters
import numpy as np
import logging as log
import os
import yaml
from yaml.loader import SafeLoader

description = 'ddg2logo: make logo plots for MutateX DDG values'
epilog = """ddg2logo generates pseudo-logo plots from DDG values.  While actual logo
plots are based on letter frequency, these are based on the provided MutateX
scan and are designed to highlight the mutation sites which specifically feature
a limited number of stabilizing (accepted) or destabilizing mutations (not accepted). For each site, the
letters of the plot represent the stabilizing (or destabilizing) mutations and their height is
proportional to the stabilizing (or destabilizing)  effect (i.e. to the absolute value of the
respective energy). If a certain site has more than a certain number of
accepted (or not accepted) mutations, the respective column can be replaced by a X - this is
controlled by the -x option. Before plotting the following transformations are
carried out on the data:

STABILIZING MUTATIONS    
* the DDG values >= than the stabilizing threshold (option -T) are set equal to 0 
* the sign of all the DDGs is changed - so that it becomes more positive if
  it's stabilizing

DESTABILIZING MUTATIONS
* the DDG values <= than the destabilizing threshold (option -t) are set equal to 0

This allows to obtain a 0-based positive-only plot in which the ratio between
the energy values is the same as the original data."""

def parse_letters_png(pngfile, letters="ACDEFGHIKLMNPQRSTVWXYypshzkmloef"):
    if type(pngfile) is tuple:
        pngfile = BytesIO(base64.b64decode("".join(pngfile)))

    png = imread(pngfile)
    side_length = png.shape[0]
    if png.shape[1] % png.shape[0] != 0:
        log.error("Input PNG file doesn't have the right shape (horizontal size is expected to be a multplie of vertical size)")
        raise TypeError

    if png.shape[1] // png.shape[0] != len(letters):
        log.error("Input PNG file does not contain the right number of letters")
        raise TypeError

    out = {}
    for i,l in enumerate(letters):
        out[l] = png[:,i*side_length:(i+1)*side_length,:]

    return out

# function to change the color of a specific residue
def color_letter(letter, color): 
    new_array = np.copy(letter)
    
    new_array[:,:,0][np.where(new_array[:,:,0] != 1.0)] = color[0]
    new_array[:,:,1][np.where(new_array[:,:,1] != 1.0)] = color[1]
    new_array[:,:,2][np.where(new_array[:,:,2] != 1.0)] = color[2]

    return new_array

def plot_matrix(mat, reslist, letters, xlabels, max_range, title=None, fontsize=8, config=None, hgap=0.5):

	# initialize values
    width = 1.0
    offset = width/2.0
    vgap = max_range/100.0
    max_y = max_range + vgap*(mat.shape[1]+3)
    xticks = np.arange(hgap, mat.shape[0]*width + mat.shape[0]*hgap, width+hgap) + offset

    # create plot
    fig, ax = plt.subplots()

    # set title
    if title is None:
        title = ""
    ax.set(title=title)

    # for every position
    for x,c in enumerate(mat):

        # filter out values of destabilizing mutations
        pos_idx = np.where(c > 0.0)

        # sort them by energy in inverse order
        local_pos_idx = np.argsort(c[pos_idx])[::-1]

        # AA mutations sorted by energy
        s_pos_idx = pos_idx[0][local_pos_idx]

        

        #if the config file is provided, load the config 
        if config is not None:
        
            #initialize dictionary with residues indeces from mutlist as 
            #keys and color as values
            pos_dic={}

            #initialize list with residues indeces cluster by color from
            #config
            color_list=[]

            #build the pos_dic with residues indeces from mutlist as 
            #keys and color as values
            for key in config:
                for aa in reslist:
                    if aa in config[key]['residues']:
                        pos_dic[reslist.index(aa)]=config[key]['color']

            #build the color_list with residues indeces cluster by 
            #color from config
            for key in config:
                tmp=[]
                for position in pos_dic:
                    if pos_dic[position]==config[key]['color']:
                        tmp.append(position)
                color_list.append(tmp)
            
            #initialize list sorted by color and list with residues 
            #not in the config
            sorted_list=[]
            no_config_res=[]

            #color_list flattend 
            flat_list=[item for sublist in color_list for item in sublist]

            #parse the s_pos_idx and append entries if found in the 
            #color_list
            for lista in color_list:
                tmp=[]

                #check if residues are not in the config and add them to
                #list of residues not in the config only once
                for i in s_pos_idx:
                    if i in lista:
                        tmp.append(i)
                    else:
                        if i not in flat_list:
                            no_config_res.append(i)
                #if the list is not empty, add it to the sorted list
                if tmp:
                    sorted_list.append(tmp)

            #append list of unique residues not in the config 
            sorted_list.append(list(set(no_config_res)))

            #remove empty lists
            for lista in sorted_list:
                if not lista:
                    sorted_list.remove(lista)

            #create numpy array from the sorted list 
            if sorted_list:
                s_pos_idx = np.hstack(sorted_list)

        # if too many of them are allowed, use X and continue
        if len(s_pos_idx) >= options.degeneracy:
            ax.imshow(letters['X'],
                      extent=(hgap + x*width + x*hgap, hgap + (x+1)*width + x*hgap, 0.0, max_y/4.0),
                      aspect='auto')

            continue

        # initialize y value accumulator
        accumulator = 0

        # for every DDG value
        for idx, i in enumerate(s_pos_idx):

            # add vertical gap (unless it's the first letter)
            if idx == 0:
                low_y = accumulator
            else:
                low_y = accumulator + vgap

            # add DDG
            accumulator += c[i]

            # plot
            ax.imshow(  letters[reslist[i]],
                        extent=(hgap + x*width + x*hgap, hgap + (x+1)*width + x*hgap, low_y, accumulator),
                        aspect='auto' )

    ax.set_ylabel(r'modified FoldX $\Delta\Delta{}$G (kcal/mol)')

    ax.set_xlim((0, mat.shape[0]*width +hgap*mat.shape[0] + hgap))
    ax.set_ylim((0, max_y))

    ax.set_xticks(xticks)
    ax.set_xticklabels(xlabels)

    plt.setp(ax.get_xticklabels(), size=fontsize, rotation=90)
    plt.tight_layout()

    return fig

def splice_data(data, labels, sv):

    out = []

    if data.shape[0] <= sv:
        return [[data, labels]]

    nsplice = data.shape[0] // int(sv)
    rest =    data.shape[0] % int(sv)

    if rest != 0:
        nsplice += 1

    for i in range(nsplice):
        out.append([
                data[i*sv:(i+1)*sv,:],
                labels[i*sv:(i+1)*sv]
            ])

    return out



LOGFMT = "%(levelname)s: %(message)s"

if not __name__ == "__main__":
    exit()

parser = argparse.ArgumentParser(
description=description, epilog=epilog, formatter_class=argparse.RawTextHelpFormatter)
optional = parser._action_groups.pop()
required = parser.add_argument_group('required arguments')
thresholds = parser.add_mutually_exclusive_group(required=True)

required = init_arguments(['pdb', 'data', 'mutation_list'], required)
optional = init_arguments(['multimers', 'position_list'], optional)

optional.add_argument("-L","--png-letter-map",dest='pngfile',action='store', default=letters, help="png file to be used for letters")

thresholds.add_argument("-T","--stab-threshold", dest="threshold_stab", action='store', type=float, help="DDG threshold values for stabilizing mutations - mutations with DDG higher than this are not considered.")
thresholds.add_argument("-t","--destab-threshold", dest="threshold_destab", action='store', type=float, help="DDG threshold values for destabilizing mutations - mutations with DDG lower than this are not considered.")
optional.add_argument("-x","--maximum-degeneracy", dest="degeneracy", action='store', type=int, default=20, help="when the number of stabilizing/destabilizing mutations is higher than this threshold an X will be plotted instead")
optional.add_argument("-c","--config", dest="config_file", action='store', default=None, help="configuration file with which the user can set the colour of subsets of residues")
optional = init_arguments(['labels', 'fonts', 'fontsize', 'title', 'splice'], optional)
optional.add_argument("-D","--dpi", dest="dpi", type=float, action='store', default=150, help="number of DPI for the output image. Saving the images at higher DPI (as 300) uses a lot of memory, therefore use with caution" )

optional.add_argument("-o","--output", dest="outfile", action='store', default='logo.pdf', help="logo plot file names")

optional = init_arguments(['verbose'], optional)

parser._action_groups.append(optional)
options = parser.parse_args()

if options.font is not None:
    try:
        set_default_font(options.font)
    except NameError:
        log.error("The specified font is not available. Available fonts:")
        log.error(get_font_list())
        exit(1)

if options.verbose:
    log.basicConfig(level=log.INFO,    format=LOGFMT)
else:
    log.basicConfig(level=log.WARNING, format=LOGFMT)

try:
    letters = parse_letters_png(options.pngfile)
except:
    log.error("Couldn't parse PNG file containing the letters; exiting...")
    exit(1)

# check positive value for DPI
if options.dpi <= 0:
    log.error('Specified resolution for image (option -D) should be a positive number. Exiting...')
    exit(1)

# parse mutation list
try:
    res_order = parse_mutlist_file(options.mutation_list)
except IOError:
    exit(1)

log.info("Residues list is:")
for i,r in enumerate(res_order):
    log.info("%d\t%s" % (i,r))

# parse structure
pdb_parser = PDB.PDBParser()
try:
    structure = pdb_parser.get_structure('s', options.in_pdb)
except:
    log.error("Couldn't open or parse input pdb file. Exiting...")
    exit(1)

res_ids_str = []
data = []

# get structure residue list
try:
    res_ids_str = get_residue_list(options.in_pdb, multimers=options.multimers)
except IOError:
    exit(1)

if options.position_list is not None:
    log.info("Positions will be read from file")
    try:
        poslist = parse_poslist_file(options.position_list, res_ids_str)
    except (IOError, TypeError):
        exit(1)

    res_ids_str = filter_reslist(res_ids_str, poslist)

if options.multimers:
    fnames = ["_".join(r) for r in res_ids_str]
    res_id_labels = [", ".join(r) for r in res_ids_str]
else:
    fnames = res_ids_str
    res_id_labels = res_ids_str

# use custom labels if provided
if options.labels:
    try:
        labels = parse_label_file(options.labels, fnames, res_id_labels)
    except:
        exit(1)
else:
    labels = res_id_labels

# use custom colour for residues subsets if a config file is provided
if options.config_file:
    try:
        with open(options.config_file) as f:
            config = yaml.load(f, Loader=SafeLoader)
    except:
        log.error("Couldn't open or parse config file. Exiting...")
        exit(1)
else:
    # if config file doesn't exist, let's use a mock configuration
    config = {'all' : {'residues' : ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
                                     'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S',
                                     'T', 'V', 'W', 'Y'],
                       'color': [0., 0., 0.]}}

new_letters = letters.copy()
for key in config:
    for aa in config[key]['residues']:
        new_letters[aa] = color_letter(new_letters[aa], config[key]['color'])
letters = new_letters

# parse DDG files
data = []
for fname in fnames:
    try:
        this_data = parse_ddg_file("%s/%s" % (options.ddg_dir, fname), reslist=res_order)
    except (IOError, TypeError):
        exit(1)

    data.append(np.array(this_data))

data = np.vstack(tuple(data))

# set values above the threshold (for stabilizing mutations) or below
# it (for the destabilizing ones) equal to 0
# In the case of stabilizing mutations, invert sign so that higher values are more stabilizing

if options.threshold_stab is not None:
    if options.threshold_stab >= 0:
        log.error("the DDG threshold provided in option -T must be <= 0. Exiting...")
        exit(1)

    data[data >= options.threshold_stab] = 0 
    data = (data) * (-1)

elif options.threshold_destab is not None:
   if options.threshold_destab <= 0:
       log.error("the DDG threshold provided in option -t must be >= 0. Exiting...")
       exit(1)
   data[ data <= options.threshold_destab ] = 0

# get the number of values that would be plotted for each line, and check against
# degeneracy value. Set the max_range according to these values only
num_positives = np.sum(data > 0.0, axis=1) < options.degeneracy
data_nondeg = data[num_positives,:]
max_range = np.max(np.sum(data_nondeg, axis=1))

#splice & plot
spliced_data = splice_data(data, labels, options.sv)
for i in range(len(spliced_data)):
    fig = plot_matrix(  spliced_data[i][0],
                        res_order,
                        letters,
                        spliced_data[i][1],
                        max_range,
                        title=options.title,
                        fontsize=options.fontsize,
                        config=config
                    )
    fig.savefig("%d_%s" %(i, options.outfile), dpi=options.dpi)

