#!/usr/bin/env python

#    ddg2density: plot probability density of DDG MutateX results.
#    Copyright (C) 2015, Matteo Tiberti <matteo.tiberti@gmail.com> 
#                        Thilde Bagger Terkelsen <ThildeBT@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot as plt
import argparse
from scipy.stats.kde import gaussian_kde
from six import iteritems
import logging as log
import numpy as np
from Bio import PDB
from mutatex.utils import *


description = "Generate probability density via kernel density estimation of the calculated DDG"
epilog = """This script uses all the input DDG data to generate a probability
density over the DDG values, using the kernel density estimation method. In
particular, this script uses the KDE implementation available in scipy (see
https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gaussian_kde.html).
Before calculating the density the program excludes the DDG values coming from
all self-mutations (i.e. mutations of each residue to the same type) as they
aren't meaningful for the purpose of the script.

The user can tune how the density calculation is performed by setting the DDG
limits between which density is calculated (-m and -x), the number of grid
points on which the density is calculated (-g), the method for the calculation
of the bandwidth (-w).

The script writes the density plot as a default (-o), and optionally simple text
files containing either the DDG values used for the calculation (-u) or the
calculated density values (-k). """

def get_ddg_data(residue_list, mutation_list, ddg_dir):

    data = []

    if options.multimers:
        res_ids_str = ["_".join(r) for r in residue_list]
    else:
        res_ids_str = residue_list
        
    res_restypes = [r[0][0] for r in residue_list]
    
    for fname in res_ids_str:

        try:
            this_data = parse_ddg_file("%s/%s" % (ddg_dir, fname), mutation_list)
        except (IOError, TypeError):
            exit(1)

        data.append(np.array(this_data))
    data = np.vstack(data)

    remove =  []
    positions = []
    for i,r in enumerate(res_restypes):
        if r in mutation_list:
            remove.append(mutation_list.index(r))
            positions.append(i)

    mask = np.ones_like(data, dtype='bool')
    mask[(positions, remove)] = 0
    return data[mask].flatten()

def plot_density(data, outfile, title, mycolor, bw_method, xmin, xmax, spaces):
    fig, ax = plt.subplots()

    kde = gaussian_kde(data, bw_method=bw_method)
    x = np.linspace(xmin, xmax, spaces)
    
    kdv = kde(np.linspace(xmin, xmax, spaces))
    
    np.savetxt(options.kdvfile, np.array([x, kdv]).T, fmt='%.5f', header='DDG, density', comments='#')

    ax.axvline(0, linestyle='--', linewidth=1, color='black')
    ax.plot(x, kdv, color=mycolor)
    ax.plot(data, np.zeros(data.shape[0])-np.max(kdv)/50.0*2, '|', ms=15, color=mycolor)
    ax.set_xlabel(r'FoldX $\Delta\Delta{}$G (kcal/mol)')
    ax.set_ylabel('Density')

    if title is not None:
        ax.title(title)

    fig.tight_layout()
    fig.savefig(outfile)

LOGFMT = "%(levelname)s: %(message)s"

parser = argparse.ArgumentParser(description=description, epilog=epilog, formatter_class=argparse.RawTextHelpFormatter)
optional = parser._action_groups.pop()
required = parser.add_argument_group('required arguments')

required = init_arguments(['pdb', 'data', 'mutation_list'], required)
optional = init_arguments(['multimers'], optional)

optional.add_argument("-m","--vmin", dest="vmin", type=float, default=-5, help="minimum DDG value for density determination (default: -5.0)")
optional.add_argument("-x","--vmax", dest="vmax", type=float, default=10, help="maxomum DDG value for density determination (default:  10.0)")
optional.add_argument("-g","--grid-points", dest="grid", type=int, default=150, help="number of point between minimum and maximum to calculate density on")
optional.add_argument("-w","--bandwidth-method", dest="bw", default=None, help="method used to calculate the estimator bandwith in KDE. Same options as scipy KDE function")

optional = init_arguments(['title', 'color', 'fonts'], optional)

optional.add_argument("-o","--output", dest="outfile", type=str, default="kde_density.pdf")
optional.add_argument("-u","--ddgfile", dest="ddgfile", type=str, default="ddg_values.dat", help="File containing all the used DDG values")
optional.add_argument("-k","--kdvfile", dest="kdvfile", type=str, default="density_values.dat", help="File containing calculated density values")

parser._action_groups.append(optional)
options = parser.parse_args()

if options.font is not None:
    try:
        set_default_font(options.font)
    except NameError:
        log.error("The specified font is not available. Available fonts:")
        log.error(get_font_list())
        exit(1)

log.basicConfig(level=log.WARNING, format=LOGFMT)   

pdb_parser = PDB.PDBParser()

try:
    residue_list = get_residue_list(options.in_pdb, multimers=options.multimers)
except IOError:
    exit(1)

try:
    mutlist = parse_mutlist_file(options.mutation_list)
except (IOError, TypeError):
    exit(1)

data = get_ddg_data(residue_list, mutlist, options.ddg_dir)

plot_density(data, options.outfile, options.title, options.mycolor, options.bw, options.vmin, options.vmax, options.grid)

np.savetxt(options.ddgfile, data, fmt='%.3f', header='DDG', comments='# ')

