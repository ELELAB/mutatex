#!/usr/bin/env python

#    ddg2matrix: plot DDG MutateX results as heat maps.
#    Copyright (C) 2015, Matteo Tiberti <matteo.tiberti@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import matplotlib
from six import iteritems
matplotlib.use('PDF')
from matplotlib import cm
from Bio import PDB
from mutatex.utils import *
import numpy as np
    
def seq_to_res(seq):
    if options.multimers:
        return "_".join(seq)
    else:
        return seq

LOGFMT = "%(levelname)s: %(message)s"

if not __name__ == "__main__":
    exit()

cmaps_list = [m for m in cm.datad if not m.endswith("_r")]

parser = argparse.ArgumentParser(
description='Calculate folding DG from MutateX DDG and experimental DG, also applying a linear correction')

parser = init_arguments(['pdb', 'data', 'multimers'], parser)

parser.add_argument("-m", "--slope", dest="m", type=float, action='store', default=1.0, help="slope value for the correction of DDG values")
parser.add_argument("-y", "--y-intercept", dest="b", type=float, action='store', default=0.0, help="Y-intercept value for the correction of DDG values")
parser.add_argument("-x", "--experimental-dg", dest="dg", type=float, default=0, action='store', help="Experimental energy of folding")

parser.add_argument("-o","--output", dest="outdir", type=str, action='store', default='dgf')

options = parser.parse_args()

import numpy as np
import logging as log
import os
from matplotlib import pyplot as plt

log.basicConfig(level=log.WARNING, format=LOGFMT)
 
res_ids = []
res_ids_str = []
data = []

try:
    foldx_sequence = get_residue_list(options.in_pdb, multimers=options.multimers)
except IOError:
    exit(1)

header="# dgf"

if os.path.isdir(options.outdir):
    log.warning("Directory %s already exists; contents will be overwritten" % options.outdir)
else:
    try:
        os.mkdir(options.outdir)
    except:
        log.error("Directory %s couldn't be created. Exiting..." % options.outdir)
        exit(1)

for res in foldx_sequence:
    resname = seq_to_res(res)
    out_fname = "%s/%s" % (options.outdir, resname)
    
    try:
        this_data = np.array(parse_ddg_file("%s/%s" % (options.ddg_dir, resname), None))
    except (IOError, TypeError):
        exit(1)

    this_data = options.dg + this_data*options.m + options.b
    try:
        np.savetxt(out_fname, this_data, fmt="%.5f", header=header)
    except:
        log.error("Couldn't save file %s. Exiting..." % out_fname)
        exit(1)
