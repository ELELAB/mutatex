#!/usr/bin/env python

#    ddg2pdb: plot DDG MutateX results in the B-factor fields of PDB files
#    Copyright (C) 2015, Matteo Tiberti <matteo.tiberti@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
from Bio import PDB
from six import iteritems
from mutatex.utils import * 
import numpy as np
import logging as log

LOGFMT = "%(levelname)s: %(message)s"

parser = argparse.ArgumentParser(
description='FoldX DDG parser & plotter',
epilog='''Please notice that cut-offs (i.e. DDG thresholds) are mandatory. In fact,
the program will save for each residue the number of mutations which are
within the specified parameters. You can control this behaviour using options
-a (low threshold), -b (high threshold)  and -t (mode).
By default, the program will consider valid values < low_thr OR (logical) > high_thr.
If -a or -b are not specified, the values of low and high thresholds are defaulted to,
respectively, -99999.0 and 99999.0. If "between" mode is selected
(option -t between), it will consider as valid those values found between the low
and high threshold. For instance, these options generate the relative
validity intervals: -a 0.5 = ]-inf,0.5] U [99999.0,+inf[ ;
-b 0.5 = ]-inf,-99999.0] U [0.5,+inf[;
-a 0.5 -b 1.0 = ]-inf,0.5] U [1.0,+inf[;
-a 0.5 -b 1.0 -t between = [0.5,1.0]
''')

optional = parser._action_groups.pop()
required = parser.add_argument_group('required arguments')

required = init_arguments(['pdb', 'data', 'mutation_list'], required)
optional = init_arguments(['multimers'], optional)

optional.add_argument("-a","--lower-free-energy-threshold", dest="low_thres",  default=-99999.0, type=float, help="lower threhsold; default value: -99999.0")
optional.add_argument("-b","--upper-free-energy-threshold", dest="high_thres", default= 99999.0, type=float, help="upper threhsold; default value: 99999.0")
optional.add_argument("-T","--threshold-mode", dest='thres_mode', choices=['between','outside'], default='outside', action='store', help="threshold mode: between=between upper and lower value, outside: <lower OR >upper")

optional.add_argument("-m","--matrix", dest="dat", default="ddgs.dat", help="output xPyder-compatible matrix")
optional.add_argument("-o","--output-pdb", dest="out_pdb", default="ddgs.pdb", help="Output pdb file")

optional = init_arguments(['verbose'], optional)

# parse ddg files
parser._action_groups.append(optional)
options = parser.parse_args()

if options.verbose:
    log.basicConfig(level=log.INFO,    format=LOGFMT)
else:
    log.basicConfig(level=log.WARNING, format=LOGFMT)

try:
    res_order = parse_mutlist_file(options.mutation_list)
except IOError:
    exit(1)

res_ids = []

try:
    res_ids_str, structure = get_residue_list(options.in_pdb, multimers=options.multimers, get_structure=True)
except IOError:
    exit(1)

models = structure.get_list()

fnames = ["_".join(r) for r in res_ids_str]

log.info("The following files will be considered: %s" % ", ".join(fnames))

data = []

if not options.high_thres and not options.low_thres:
    log.error("Please provide a DDG cut-off (options -a, -b, -t). Exiting...")
    exit(1)
else:
    log.info("Filtering will be performed.")
    log.info("Low threshold: %.2f" % options.low_thres)
    log.info("High threshold: %.2f"% options.high_thres)

if options.thres_mode == 'outside':
    log.info("Mode: outside. Only values > %.2f OR values < %.2f will be considered." % (options.high_thres, options.low_thres))
elif options.thres_mode == 'between':
    log.info("Mode: between. Only values between %.2f and %.2f will be considered." % (options.low_thres, options.high_thres))

for i,r in enumerate(res_ids_str):
    try:
        tmp_data = np.array(parse_ddg_file("%s/%s" % (options.ddg_dir, fnames[i]), reslist=res_order))
    except (IOError, TypeError):
        exit(1)
    if options.thres_mode == 'outside':
        processed_data = np.sum(np.logical_or(tmp_data <= options.low_thres, tmp_data >= options.high_thres))
    elif options.thres_mode == 'between':
        processed_data = np.sum(np.logical_and(tmp_data <= options.high_thres, tmp_data >= options.low_thres))

    for sr in r:
        for model in structure:
            for atom in model[sr[1]][int(sr[2:])]:
                atom.set_bfactor(processed_data)

for chain in structure[0]:
    for residue in chain:
        try:
            data.append(residue['CA'].get_bfactor())
        except KeyError:
            pass

data = np.array(data)

mat = np.zeros((data.shape[0], data.shape[0]))
np.fill_diagonal(mat, data)

np.savetxt(options.dat, mat, fmt="%.1f")

pdb_io = PDB.PDBIO()
pdb_io.set_structure(structure)
pdb_io.save(options.out_pdb)
