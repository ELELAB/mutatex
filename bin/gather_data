#!/usr/bin/env python
#./gather_data -p file.pdb -d final_averages -L cancer_mutations -l mutation_list.txt

#    ddg2matrix: plot DDG MutateX results as heat maps.
#    Copyright (C) 2015, Matteo Tiberti <matteo.tiberti@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import os
from Bio import PDB
from six import iteritems
from mutatex.utils import *
import numpy as np
import logging as log
import os
import re

def parse_desired_mutations_list(fname, reslist, mutlist):
    mut_pattern = '^[A-Za-z]*([A-Z][0-9]+[A-Za-z])$'
    mut_re = re.compile(mut_pattern)

    processed_reslist = []

    selected_muts = []

    for r in reslist:
        processed_reslist.append( tuple([ ri[1:] for ri in r]))

    try:
        with open(fname) as fh:
            strings = [ str.strip(l) for l in fh.readlines() ]
    except IOError:
        log.error("File %s couldn't be opened" % fname)
        raise IOError

    for s in strings:
        if not s:
            continue
        match = mut_re.match(s)
        if match:
            wt = match.group(1)[:-1]
            mut = match.group(1)[-1]
        else:
            log.warning("Expression %s in mutation list file was not understood, it will be skipped" % s)
            continue
        wt_matches = []
        for ir, r in enumerate(reslist):
            if wt in r:
                wt_matches.append(ir)
        if len(wt_matches) == 0:
            log.warning("Residue %s was not found in the PDB file, it will be skipped" % wt)
            continue
        if len(wt_matches) > 1:
            log.warning("Residues %s was found more than once in the PDB file; it will be skipped0" % wt)

        if mut not in mutlist:
            log.warning("In mutation %s the mutant residue type was not found in the input residue list; it will be skipped" % s)
            continue

        selected_muts.append((ir, mutlist.index(mut)))



parser = argparse.ArgumentParser(
    description='Write DDG data of specific mutations in a summary text file',)
optional = parser._action_groups.pop()
required = parser.add_argument_group('required arguments')

required = init_arguments(['pdb', 'data', 'mutation_list'], required)
required.add_argument("-L","--mutation-list", dest="mutations",  help="List of mutations to consider")

optional = init_arguments(['multimers'], optional)

options = parser.parse_args()
pdb_parser = PDB.PDBParser()

parser._action_groups.append(optional)
options = parser.parse_args()

try:
    res_ids = get_residue_list(options.in_pdb, multimers=options.multimers)
except IOError:
    exit(1)

try:
    res_order = parse_mutlist_file(options.mutation_list)
except (IOError, TypeError):
    exit(1)

try:
    mutation_list = parse_desired_mutations_list(options.residues, res_ids, res_order)
except (IOError, TypeError):
    exit(1)

try:
    with open("summary.txt",'w') as fh:
        for residx, mutidx in mutation_list:
            resname = "_".join(res_ids[residx])
            fname = os.path.join(options.ddg_dir, resname)
            ddg = parse_ddg_file(fname, reslist=res_order, full=True)
            fh.write("%s%s\t"%(rid,mut))
            fh.write("%.3f\t%.3f\t%.3f\t%.3f\n" % ddg[mutidx])
except IOError:
    log.error("couldn't write output file, exiting...")


