#!/usr/bin/env python

#    ddg2matrix: plot DDG MutateX results as heat maps.
#    Copyright (C) 2019, Matteo Tiberti <matteo.tiberti@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.



import numpy as np
import logging as log
import os
import argparse
import matplotlib
matplotlib.use('Agg')
matplotlib.rcParams['savefig.format'] = 'pdf'
from matplotlib import pyplot as plt
from matplotlib import cm
from mpl_toolkits.axes_grid1 import make_axes_locatable, axes_size
import csv
from Bio import PDB
from six import iteritems
from mutatex.utils import *

description = 'ddg2matrix: plot heatmaps of MutateX DDG data'
epilog = """ddg2matrix plots DDGs from MutateX scans as heatmaps. By default, the value
in the average column of the DDG files is used. Options -n and -x allow to set
the minumum and maximum plottable values, meaning that any value below/above the
thresold is set to the threshold in the plot. Option -t allows to  select the
orientation of the heatmap (by default, the mutation sites are on the x axis).
The script writes a pdf output file with the plot (-o) as well as the raw data
as a text table (-r)."""

def plot_matrix(mat, xlabels, ylabels, cmap, title=None, vmin=None, vmax=None, transpose=False, fontsize=8):

    aspect = 10
    pad_fraction = 1.5

    xt = xlabels
    yt = ylabels

    xticks = np.arange(0,mat.shape[1])
    yticks = np.arange(0,mat.shape[0])

    if title == None:
        title = ""

    plt.title(title)

    orientation='vertical'
    rotation_xt=90

    if transpose:
        mat = mat.T
        xticks, yticks = yticks, xticks
        xt, yt = yt, xt
        orientation='horizontal'
        rotation_xt=90

    ax = plt.gca()
    im = plt.imshow(mat, interpolation="nearest",cmap=cmap, vmin=vmin, vmax=vmax)
    plt.xticks(xticks,xt,rotation=rotation_xt,size=fontsize)
    plt.yticks(yticks,yt,rotation=0,size=fontsize)
    divider = make_axes_locatable(ax)
    width = axes_size.AxesY(ax, aspect=1./aspect)
    pad = axes_size.Fraction(pad_fraction, width)
    cax = divider.append_axes("right", size=width, pad=pad)
    cb = plt.colorbar(im, cax=cax, orientation=orientation)
    cb.set_label(r'FoldX $\Delta\Delta{}$G (kcal/mol)')

    for t in cb.ax.get_yticklabels():
        t.set_fontsize(fontsize)

    plt.tight_layout()

def save_matrix(mat, horizontal_header, vertical_header, fname):

    this_mat = np.array(mat, copy=True)

    str_mat = np.char.mod("%.2f", this_mat)

    str_mat[str_mat == 'nan'] = '-'

    vertical_header = ['%s.%s'%(i[2:],i[0]) for i in vertical_header]
    out = np.zeros((mat.shape[0]+1, mat.shape[1]+1), dtype="|S10")
    out[0,0] = ''
    out[1:,1:] = str_mat
    out[0,1:] = np.array(horizontal_header)
    out[1:,0] = np.array(vertical_header)

    justified_out = np.core.defchararray.rjust(out, 7)

    np.savetxt(justified_out, fname)

def splice_data(data, labels, sv):

    out = []

    if data.shape[1] <= sv:
        return [[data, labels]]

    nsplice = data.shape[1] // int(sv)
    rest =    data.shape[1] %  int(sv)

    if rest != 0:
        nsplice += 1

    for i in range(nsplice):
        out.append([
                data[:,i*sv:(i+1)*sv],
                labels[i*sv:(i+1)*sv]
            ])

    return out



LOGFMT = "%(levelname)s: %(message)s"

cmaps_list = plt.colormaps()

parser = argparse.ArgumentParser(description=description, epilog=epilog, formatter_class=argparse.RawTextHelpFormatter)
optional = parser._action_groups.pop()
required = parser.add_argument_group('required arguments')

required = init_arguments(['pdb', 'data', 'mutation_list'], required)
optional = init_arguments(['multimers'], optional)

optional.add_argument("-n","--min", dest='vmin',action='store',default=None,type=float,help="minimum value to be plotted")
optional.add_argument("-x","--max", dest='vmax',action='store',default=None,type=float,help="maximum value to be plotted")
optional.add_argument("-t","--transpose",dest='transpose',action="store_true",default=False,help="swap rows and columns")

optional = init_arguments(['labels', 'fonts', 'fontsize', 'title', 'splice'], optional)
optional.add_argument("-c","--color-map",dest='cmap',action='store', type=str, default='jet', help="color map used to plot the DDG values (choose from: %s)" % ", ".join(cmaps_list))

optional.add_argument("-o","--output", dest="outfile", action='store', default='heatmap.pdf')
optional.add_argument("-r","--output-raw-data", dest="raw", action='store', default=None, help="save raw data file")

optional = init_arguments(['verbose'], optional)

parser._action_groups.append(optional)
options = parser.parse_args()

if options.font is not None:
    try:
        set_default_font(options.font)
    except NameError:
        log.error("The specified font is not available. Available fonts:")
        log.error(get_font_list())
        exit(1)

if options.verbose:
    log.basicConfig(level=log.INFO,    format=LOGFMT)
else:
    log.basicConfig(level=log.WARNING, format=LOGFMT)

if options.cmap not in cmaps_list:
    log.error("Specified color map is not available. Choose one between: %s." % ", ".join(cmaps_list) )
    exit(1)


try:
    res_order = parse_mutlist_file(options.mutation_list)
except IOError:
    exit(1)

log.info("Residues list is:")
for i,r in enumerate(res_order):
    log.info("%d\t%s" % (i,r))

res_ids_str = []
data = []

try:
    res_ids_str = get_residue_list(options.in_pdb, multimers=options.multimers)
except IOError:
    exit(1)

if options.multimers:
    fnames = ["_".join(r) for r in res_ids_str]
    res_id_labels = [", ".join(r) for r in res_ids_str]
else:
    fnames = res_ids_str
    res_id_labels = res_ids_str


#Assign custom residue labels
if options.labels:
    try:
        labels = parse_label_file(options.labels, fnames, res_id_labels)
    except:
        exit(1)
else:
    labels = res_id_labels

#load ddg data
for fname in fnames:
    try:
        this_data = parse_ddg_file("%s/%s" % (options.ddg_dir, fname), reslist=res_order)
    except (IOError, TypeError):
        exit(1)

    data.append(np.array(this_data))

data = np.vstack(tuple(data)).T

#get min and max
if not options.vmax:
    options.vmax = np.max(data)
if not options.vmin:
    options.vmin = np.min(data)

#splice data into blocks for plotting
spliced_data = splice_data(data, labels, options.sv)

if options.raw:
    save_matrix(data, res_order, labels, options.raw, options.transpose)

for i in range(len(spliced_data)):
    plot_matrix(spliced_data[i][0],
                spliced_data[i][1],
                res_order,
                cm.get_cmap(options.cmap),
                title=options.title,
                vmin=options.vmin,
                vmax=options.vmax,
                transpose=options.transpose,
                fontsize=options.fontsize)
    plt.savefig("%d_%s" %(i, options.outfile))
    plt.clf()
