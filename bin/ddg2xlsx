#! /usr/bin/env python
#    ddg2xlsx: convert DDG MutateX results to the xlsx format.
#    Copyright (C) 2015, Matteo Tiberti <matteo.tiberti@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


import argparse
from Bio import PDB
from six import iteritems
import numpy as np
import logging as log
import openpyxl as pyxl
from mutatex.utils import *

LOGFMT = "%(levelname)s: %(message)s"

parser = argparse.ArgumentParser(
description='FoldX DDG converter to the OOXML xlsx format',)

parser = init_arguments(['pdb', 'data', 'mutation_list', 'multimers'], parser)

parser.add_argument("-T","--transpose",dest='transpose',action="store_true",default=False,help="Swap rows and columns")

parser.add_argument("-o","--output", dest="outfile", action='store', default='energies.xlsx')

parser = init_arguments(['labels'], parser)

parser = init_arguments(['verbose'], parser)


# parse ddg files
options = parser.parse_args()

if options.verbose:
    log.basicConfig(level=log.INFO,    format=LOGFMT)
else:
    log.basicConfig(level=log.WARNING, format=LOGFMT)

try:
    res_order = parse_mutlist_file(options.mutation_list)
except IOError:
    exit(1)

log.info("Residues list is:")
for i,r in enumerate(res_order):
    log.info("%d\t%s" % (i,r))

try:
    res_ids_str = get_residue_list(options.in_pdb, multimers=options.multimers)
except IOError:
    exit(1)

max_len_res_ids = np.max([len(r) for r in res_ids_str])
if options.multimers:
    fnames = ["_".join(r) for r in res_ids_str]
    res_id_labels = [", ".join(r) for r in res_ids_str]
else:
    fnames = res_ids_str
    res_id_labels = res_ids_str
    
data = []

log.info("The following files will be considered: %s" % ", ".join(res_id_labels))

for i,f in enumerate(fnames):
    try:
        data.append(np.array(parse_ddg_file("%s/%s" % (options.ddg_dir, f), reslist=res_order, )))
    except (IOError, TypeError):
        exit(1)


wb = pyxl.Workbook()
ws = wb['Sheet']
ws.title = 'FoldX mutations DDG'

#prepare header
for i in range(max_len_res_ids):
    offset=i*3
    if options.transpose:
        ws.cell(row=1+offset, column=1).value = "WT Residue type"
        ws.cell(row=1+offset+1, column=1).value = "Chain ID"
        ws.cell(row=1+offset+2, column=1).value = "Residue #"
    else:
        ws.cell(row=1, column=1+offset).value = "WT Residue type"
        ws.cell(row=1, column=1+offset+1).value = "Chain ID"
        ws.cell(row=1, column=1+offset+2).value = "Residue #"

offset = 0
for i,resset in enumerate(res_ids_str):
    for j,res in enumerate(resset):
        offset = j*3
        if options.transpose:
            ws.cell(row=1+offset,  column=1+i+1).value = str(res[0])
            ws.cell(row=1+offset+1,column=1+i+1).value = str(res[1])
            ws.cell(row=1+offset+2,column=1+i+1).value = res[2:]
        else:
            ws.cell(row=1+i+1,column=1+offset  ).value = str(res[0])
            ws.cell(row=1+i+1,column=1+offset+1).value = str(res[1])
            ws.cell(row=1+i+1,column=1+offset+2).value = res[2:]
offset += 3
for i,mut in enumerate(res_order):
    if options.transpose:
        ws.cell(row=1+i+offset,column=1).value = mut
    else:
        ws.cell(row=1,column=1+i+offset).value = mut

for i,res in enumerate(res_ids_str):
    for j,ddg in enumerate(data[i]):
        if options.transpose:
            ws.cell(row=1+j+offset, column=1+i+1).value = ddg
        else:
            ws.cell(row=1+i+1, column=1+j+offset).value = ddg

wb.save(options.outfile)
