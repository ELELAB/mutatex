#!/usr/bin/env python
#    ddg2labels: Generate a custom .csv file used to add labels to residues in most other plotting tools.
#    Copyright (C) 2015, Matteo Tiberti <matteo.tiberti@gmail.com, Tycho Canter Cremers <tycho.c.c@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import csv
from Bio import PDB
from six import iteritems
import sys
from mutatex.utils import *

if sys.version_info[0] <= 2:
    write_format = 'wb'
else:
    write_format = 'w'

def names_to_labels(csv_fh):
    csv_writer = csv.writer(csv_fh, delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL)
    csv_writer.writerow(['Residue_name', 'Label'])
    for fname in fnames:
        csv_writer.writerow([fname, ""])
    
LOGFMT = "%(levelname)s: %(message)s"

parser = argparse.ArgumentParser( 
    description='ddg2labels: Generate a comma separeted .csv file to add custom labels to specific residues.',)

parser.add_argument("-p","--pdb", dest="in_pdb", help="Input pdb file")
parser.add_argument("-v","--verbose", dest="verbose", action="store_true", default=False, help="verbose mode")
parser.add_argument("-o","--output", dest="outfile", action='store', default='labels.csv')
parser.add_argument("-a","--multimers", dest="multimers", default=True, action='store_false')

options = parser.parse_args()

import numpy as np
import logging as log


if options.verbose:
    log.basicConfig(level=log.INFO,    format=LOGFMT)
else:
    log.basicConfig(level=log.WARNING, format=LOGFMT)

res_ids_str = []
try:
    res_ids_str = get_residue_list(options.in_pdb, multimers=options.multimers)
except IOError:
    exit(1)

if options.multimers:
    fnames = ["_".join(r) for r in res_ids_str]
    res_id_labels = [", ".join(r) for r in res_ids_str]
else:
    fnames = res_ids_str
    res_id_labels = res_ids_str

try:
    csvfh = open(options.outfile, write_format)
except:
    log.error("couldn't open output file for writing; exiting...")
    exit(1)

names_to_labels(csvfh)

csvfh.close()




