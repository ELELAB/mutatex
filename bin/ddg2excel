#! /usr/bin/env python
#    ddg2excel: write DDG MutateX results in the xlsx format
#    Copyright (C) 2015, Matteo Tiberti <matteo.tiberti@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


import argparse
from Bio import PDB
from six import iteritems
import numpy as np
import logging as log
import openpyxl as pyxl
from mutatex.utils import *

LOGFMT = "%(levelname)s: %(message)s"

description = 'ddg2excel: write the average values from a MutateX DDG scan as Excel tables'
epilog = """ddg2excel writes the average values from a MutateX DDG scan as an Excel table
file (.xlsx). Option -T swaps rows and columns of the output file. By default,
residue type, number and chain identifier are written in separate columns/rows
to make the data easily explorable, however one column/row is used when the
label file is provided (option -b)"""

parser = argparse.ArgumentParser(description=description, epilog=epilog, formatter_class=argparse.RawTextHelpFormatter)
optional = parser._action_groups.pop()
required = parser.add_argument_group('required arguments')

required = init_arguments(['pdb', 'data', 'mutation_list'], required)
optional = init_arguments(['multimers', 'position_list'], optional)

optional.add_argument("-T","--transpose", dest='transpose', action="store_true", default=False, help="swap rows and columns")

optional.add_argument("-o","--output", dest="outfile", action='store', default='energies.xlsx', help="output excel file")

optional = init_arguments(['labels', 'verbose'], optional)

parser._action_groups.append(optional)
options = parser.parse_args()

if options.verbose:
    log.basicConfig(level=log.INFO,    format=LOGFMT)
else:
    log.basicConfig(level=log.WARNING, format=LOGFMT)

try:
    res_order = parse_mutlist_file(options.mutation_list)
except (IOError, TypeError):
    exit(1)

log.info("Mutation list is:")
for i,r in enumerate(res_order):
    log.info("%d\t%s" % (i,r))

try:
    res_ids_str = get_residue_list(options.in_pdb, multimers=options.multimers)
except IOError:
    exit(1)

if options.position_list is not None:
    log.info("Positions will be read from file")
    try:
        poslist = parse_poslist_file(options.position_list)
    except (IOError, TypeError):
        exit(1)

    res_ids_str = filter_reslist(res_ids_str, poslist)

max_len_res_ids = np.max([len(r) for r in res_ids_str])
if options.multimers:
    fnames = ["_".join(r) for r in res_ids_str]
    res_id_labels = [", ".join(r) for r in res_ids_str]
else:
    fnames = res_ids_str
    res_id_labels = res_ids_str

if options.labels:
    try:
        labels = parse_label_file(options.labels, fnames, res_id_labels)
    except:
        exit(1)
else:
    labels = None

data = []

log.info("The following files will be considered: %s" % ", ".join(fnames))

for i,f in enumerate(fnames):
    try:
        data.append(np.array(parse_ddg_file("%s/%s" % (options.ddg_dir, f), reslist=res_order, )))
    except (IOError, TypeError):
        exit(1)

wb = pyxl.Workbook()
ws = wb['Sheet']
ws.title = 'FoldX mutations DDG'

#prepare header
if labels:
    ws.cell(row=1, column=1).value = "Residue"

    offset = 0
    for i,l in enumerate(labels):
        if options.transpose:
            ws.cell(row=1, column=1+i+1).value = l
        else:
            ws.cell(row=1+i+1,column=1).value = l
    offset = 1

else:
    for i in range(max_len_res_ids):
        offset=i*3
        if options.transpose:
            ws.cell(row=1+offset, column=1).value = "WT Residue type"
            ws.cell(row=1+offset+1, column=1).value = "Chain ID"
            ws.cell(row=1+offset+2, column=1).value = "Residue #"
        else:
            ws.cell(row=1, column=1+offset).value = "WT Residue type"
            ws.cell(row=1, column=1+offset+1).value = "Chain ID"
            ws.cell(row=1, column=1+offset+2).value = "Residue #"

    offset = 0
    for i,resset in enumerate(res_ids_str):
        for j,res in enumerate(resset):
            offset = j*3
            if options.transpose:
                ws.cell(row=1+offset,  column=1+i+1).value = str(res[0])
                ws.cell(row=1+offset+1,column=1+i+1).value = str(res[1])
                ws.cell(row=1+offset+2,column=1+i+1).value = res[2:]
            else:
                ws.cell(row=1+i+1,column=1+offset  ).value = str(res[0])
                ws.cell(row=1+i+1,column=1+offset+1).value = str(res[1])
                ws.cell(row=1+i+1,column=1+offset+2).value = res[2:]
    offset += 3

for i,mut in enumerate(res_order):
    if options.transpose:
        ws.cell(row=1+i+offset,column=1).value = mut
    else:
        ws.cell(row=1,column=1+i+offset).value = mut

for i,res in enumerate(res_ids_str):
    for j,ddg in enumerate(data[i]):
        if options.transpose:
            ws.cell(row=1+j+offset, column=1+i+1).value = ddg
        else:
            ws.cell(row=1+i+1, column=1+j+offset).value = ddg

wb.save(options.outfile)
