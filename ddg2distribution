#!/usr/bin/env python
#    ddg2distribution: plot DDG MutateX results as distribution plots: boxplot, violinplot or scatterplot.
#    Copyright (C) 2015, Matteo Tiberti <matteo.tiberti@gmail.com, Tycho Canter Cremers <tycho.c.c@gmail.com>, 
#    Thilde Bagger Terkelsen <thildebt@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import matplotlib
import csv
matplotlib.use('PDF')
from Bio import PDB
    
#Add extra ptm residues to PDB.Polypeptide three to one module 
ptm_residues = {"y": "PTR",
                "p": "TPO",
                "s": "SEP",
                "h": "HYP",
                "z": "TYS",
                "k": "MLZ",
                "m": "MLY",
                "l": "M3L",
                "o": "H1S",
                "e": "H2S",
                "f": "H3S"}
len_three2one = len(PDB.Polypeptide.d1_to_index)
idx=len_three2one
for k,v in ptm_residues.iteritems():
    PDB.Polypeptide.d1_to_index[k] = idx
    PDB.Polypeptide.dindex_to_1[idx] = k
    
    PDB.Polypeptide.d3_to_index[v] = idx
    PDB.Polypeptide.dindex_to_3[idx] = v
    idx += 1


def get_residue_list(structure, multimers=True):
    models = structure.get_list()

    if len(models) > 1:
        log.warning("%d models are present in the input PDB file; only the first will be used." % len(models))
    if len(models) < 1:
        log.error("The input PDB file does not contain any model. Exiting ...")
        exit(1)

    model = models[0]
    
    residue_list = []
    sequences = {}

    for chain in model:
        chain_name = chain.get_id()
        sequences[chain_name] = ''
        for residue in chain:
            try:
                res_code = PDB.Polypeptide.three_to_one(residue.get_resname())
            except:
                log.warning("Residue %s in file %s couldn't be recognized; it will be skipped" %(residue, options.pdb))
                continue
            if not multimers:
                residue_list.append(("%s%s%d") % (res_code, chain.get_id(), residue.get_id()[1]))
            else:
                sequences[chain_name] += res_code

    if options.multimers:
        collated_chains = []
        seq_ids, seqs = zip(*list(sequences.iteritems()))
        seq_ids = np.array(seq_ids)
        unique_seqs, unique_idxs = np.unique(seqs, return_inverse=True)
        for i in np.unique(unique_idxs):
            collated_chains.append(seq_ids[unique_idxs == i])

        for cg in collated_chains:
            for model in structure:
                for residue in model[cg[0]]:
                    resid = residue.get_id()[1]
                    try:
                        res_code = PDB.Polypeptide.three_to_one(residue.get_resname())
                    except:
                        log.warning("Residue %s in file %s couldn't be recognized; it will be skipped" %(residue, options.pdb))
                        continue
                    residue_list.append(tuple([ "%s%s%d" % (res_code, c, resid) for c in cg ]))
    return residue_list

def parse_ddg_file(fname, reslist):
    try:
        fh = open(fname, 'r')
    except:
        log.warning("file %s cannot be opened." % fname)
        return None

    ddgs = []
    for line in fh:
        if line and not line.startswith("#"):
            ddgs.append(float(line.split()[0]))
            
    if len(ddgs) != len(reslist):
        log.error("file %s has %d values, with %d required. Exiting..." % (fname, len(ddgs), len(reslist)))
        exit(1)
    return ddgs

def parse_list_file(fname):
    fh = open(fname, 'r')
    restypes = []
    for line in fh:
        if line and not line.startswith("#"):
            restypes.append(line.strip()[0])
    return restypes

def plot_box(mat, xlabels, vmin, vmax, title=None, fontsize=8):
    xt = xlabels
    xticks = np.arange(1,mat.shape[1]+1)
    if title is None:
        title = ""

    plt.title(title)
    box = plt.boxplot(mat)
    
    cm = plt.cm.get_cmap('Greys_r')
    for i, key in enumerate(list(box.keys())):
        plt.setp(box[key], color=cm(float(i)/10))

    plt.ylim(vmin, vmax)
    plt.xlabel("Residue id")
    plt.ylabel(r'FoldX $\Delta\Delta{}G (kcal/mol)$')
    rotation_xt=90
    plt.xticks(xticks,xt,rotation=rotation_xt,size=fontsize)
    plt.tight_layout()
    
def plot_violin(mat, xlabels, vmin, vmax, title=None, fontsize=8):
    xt = xlabels
    xticks = np.arange(1,mat.shape[1]+1)
    if title is None:
        title = ""

    plt.title(title)
     
    violin = plt.violinplot(mat, 
                            xticks, 
                            showmeans = True, 
                            showextrema = True, 
                            showmedians = True, 
                            points = 100,
                            widths = 0.7, 
                            bw_method='scott')
    
    cm = plt.cm.get_cmap('Greys_r')
    for i, key in enumerate(list(violin.keys())):
        plt.setp(violin[key], color=cm(float(i)/10))

    plt.ylim(vmin, vmax)
    
    plt.xlabel("Residue id")
    plt.ylabel(r'FoldX $\Delta\Delta{}G (kcal/mol)$')
    rotation_xt=90
    plt.xticks(xticks,xt,rotation=rotation_xt,size=fontsize)
    plt.xlim(0,mat.shape[1]+1)
    plt.tight_layout()
    
    
def plot_single(mat, xlabels, res_order, vmin, vmax, title=None, fontsize=8):
    xt = xlabels
    xticks = np.arange(1,mat.shape[1]+1)
    if title is None:
        title = ""
    
    if options.limit:
        mat[mat > options.limit] = options.limit
        vmax = options.limit + abs(0 - options.limit * 0.2)

    plt.title(title)
    
    #Plot graph
    for i in range(len(res_order)):
        plt.scatter(xticks, mat[i], color="black", s=1.5)
    plt.ylim(vmin, vmax)
    
    #Calculate non-overlapping label coordinates    
    fig_height = plt.gcf().get_figheight()
    y_range = abs(plt.ylim()[0] - plt.ylim()[1])
    fontsize_inch = (float(1) / 72) * 12    #label font size in inches
    label_size = (y_range / fig_height) * fontsize_inch #Size of the labels on the y axis
    label_size *= 1.05  #Add margin to label size
    y_coords = np.copy(mat.T)
    
    mat = mat.T
    overlap = True
    while overlap:
        overlap = False
        for residue in range(y_coords.shape[0]):        
            for i in range(y_coords.shape[1]):
                for j in range(y_coords.shape[1]):
                    diff = abs(y_coords[residue][i] - y_coords[residue][j])
                    offset = label_size - diff
                    if(diff < label_size and i is not j and offset > 0.01): #Check for overlap
                        overlap = True
                        if(mat[residue][i] > mat[residue][j]): #Devide offset between points (Add to highest, subtract from lowest ddg value)
                            if(y_coords[residue][j] + offset/2 < vmax): #Check if changed label coordinates don't fall outside y-range
                                y_coords[residue][i] += offset/2
                            if(y_coords[residue][j] - offset/2 > vmin):
                                y_coords[residue][j] -= offset/2
                        else:
                            if(y_coords[residue][i] - offset/2 > vmin):
                                y_coords[residue][i] -= offset/2
                            if(y_coords[residue][i] + offset/2 < vmax):            
                                y_coords[residue][j] += offset/2
    #Add labels
    x_offset = float(len(xticks)) / 270
    for i in range(len(res_order)):
        res = res_order[i]        
        for j in xticks:
            plt.annotate(res, (j + x_offset, y_coords[j-1][i]), fontsize = fontsize)
    
    plt.xlabel("Residue id")
    plt.ylabel(r'FoldX $\Delta\Delta{}G (kcal/mol)$')
    rotation_xt=90
    plt.xticks(xticks,xt,rotation=rotation_xt,size=fontsize)
    plt.xlim(0,mat.shape[0]+1)
    plt.tight_layout()


def plot_stemplot(mat, xlabels, vmin, vmax, title=None, fontsize=8):
    xt = xlabels
    xticks = np.arange(1,mat.shape[1]+1)
    if title is None:
        title = ""
    cm = plt.cm.get_cmap('Greys')
    
    mean_means = [np.average(i) for i in mat.T]
    ste = [np.std(i) for i in mat.T]
    
    fig = plt.figure()
    plt.title(title)
    ax = plt.subplot(111)
    sc = ax.scatter(xticks, mean_means, s=100, c=mean_means, marker='o', edgecolors='grey', cmap=cm, alpha=1)
    ax.errorbar(xticks, mean_means, yerr=ste, ls='None', color='grey')
    ax.set_xlabel('Wild-type Amino Acids')
    ax.set_ylabel(r'Mean FoldX $\Delta\Delta{}G (kcal/mol)$')
    plt.xticks(xticks, xt, rotation='vertical', size=fontsize)
    plt.colorbar(sc)
    plt.tight_layout()

def plot_scatter(mat, xlabels, vmin, vmax, title=None, fontsize=8, topmuts=0):
    lv_offset=0.05
    lh_offset=0.3
    xtick_interval = mat.shape[1] / 10
    xticks = np.arange(1, mat.shape[1]+1, xtick_interval)
    xs = np.arange(1, mat.shape[1]+1)
    xt = [str(t) for t in xticks]
    if title is None:
        title = ""
    cm = plt.cm.get_cmap('Greys')
    
    mean_means = np.array([np.average(i) for i in mat.T])
    mean_means_color = mean_means.copy()
    mean_means_color[mean_means_color >= vmax] = vmax
    mean_means_color[mean_means_color <= vmin] = vmin

    mean_means_labels = np.argsort(mean_means)[::-1][:topmuts]

    fig = plt.figure()
    plt.title(title)
    ax = plt.subplot(111)
    print xticks
    print mean_means
    sc = ax.scatter(xs, mean_means, s=100, c=mean_means_color, marker='o', edgecolors='grey', cmap=cm, alpha=1)
    ax.set_xlabel('Wild-type Amino Acids')
    ax.set_ylabel(r'Mean FoldX $\Delta\Delta{}G (kcal/mol)$')
    plt.xticks(xticks, xt)

    for l in mean_means_labels:
        plt.text(l+1+lh_offset, mean_means[l]+lv_offset, xlabels[l], ha='left', va='bottom', size=fontsize)

    #plt.colorbar(sc)
    plt.tight_layout()



def splice_data(data, labels, sv):

    out = []

    if data.shape[1] <= sv:
        return [[data, labels]]

    nsplice = data.shape[1] / int(sv)
    rest =    data.shape[1] % int(sv)

    if rest != 0:
        nsplice += 1

    for i in range(nsplice):
        out.append([
                data[:,i*sv:(i+1)*sv],
                labels[i*sv:(i+1)*sv]
                ])

    return out



LOGFMT = "%(levelname)s: %(message)s"

if not __name__ == "__main__":
    exit()


parser = argparse.ArgumentParser( 
    description='ddg2distribution: plot DDG MutateX results as distribution plots: boxplot, violinplot or scatterplot.',)

parser.add_argument("-p","--pdb", dest="in_pdb", help="Input pdb file")
parser.add_argument("-d","--data-directory", dest="dir", type=str, help="input data directory")
parser.add_argument("-m","--include-invalid-files",dest='includeblank',action='store_true', default=False, help="Include empty columns in output instead of ignoring missing files")
parser.add_argument("-l","--order-list", dest="order",  help="default order list")
parser.add_argument("-b","--label-list", dest="labels", help="residue label list")
parser.add_argument("-v","--verbose", dest="verbose", action="store_true", default=False, help="verbose mode")
parser.add_argument("-o","--output", dest="outfile", action='store', default='energies.pdf')
parser.add_argument("-n","--min", dest='vmin',action='store',default=None,type=float,help="Minimum value to be plotted")
parser.add_argument("-x","--max", dest='vmax',action='store',default=None,type=float,help="Maximum value to be plotted")
parser.add_argument("-i","--title", dest='title', action='store', default=None, type=str, help="Title for the output image file")
parser.add_argument("-s","--splice",dest='sv',action='store', type=int, default=20, help="Number of residues for each single image")
parser.add_argument("-f","--fontsize",dest='fontsize',action='store', type=int, default=8, help="Axis label font size")
parser.add_argument("-a","--multimers", dest="multimers", default=True, action='store_false')
parser.add_argument("-t","--limit", dest="limit", action='store', default = None, type=int, help="Limit scatter plot ddg values to a maximum")
parser.add_argument("-T","--type", dest="type", nargs = '+', required = True, choices = ["stem", "box", "violin", "single", "scatter"], help = "Choose type(s) of plot(s) to generate: stem, box, violin or scatter. Duplicates will be ignored.")
parser.add_argument("-u","--topmuts", dest="topmuts", type=int, default=0, help="Number of extreme residues to be labeled (scatter plot only)")


options = parser.parse_args()

import numpy as np
import logging as log
from matplotlib import pyplot as plt


if options.verbose:
    log.basicConfig(level=log.INFO,    format=LOGFMT)
else:
    log.basicConfig(level=log.WARNING, format=LOGFMT)

res_order = parse_list_file(options.order)

log.info("Residues list is:")
for i,r in enumerate(res_order):
    log.info("%d\t%s" % (i,r))

pdb_parser = PDB.PDBParser()

try:
    structure = pdb_parser.get_structure('s', options.in_pdb)
except:
    log.error("Couldn't open or parse input pdb file. Exiting...")
    exit(1)

res_ids_str = []
data = []

res_ids_str = get_residue_list(structure, multimers=options.multimers)

if options.multimers:
    fnames = ["_".join(r) for r in res_ids_str]
    res_id_labels = [", ".join(r) for r in res_ids_str]
else:
    fnames = res_ids_str
    res_id_labels = res_ids_str


#Assign custom residue labels
if options.labels:
    label_dict = {}
    with open(options.labels, 'rb') as csvfile:
        csv_reader = csv.reader(csvfile, delimiter=',', quotechar='|')
        for row in csv_reader:
            if row[1] != '':
                label_dict[row[0]] = row[1]
    for i in range(len(fnames)):
        if fnames[i] in label_dict:
            res_id_labels[i] = label_dict[fnames[i]]



for fname in fnames:
    this_data = parse_ddg_file("%s/%s" % (options.dir, fname), reslist=res_order)
    if this_data:
        data.append(np.array(this_data))
        continue
    elif options.includeblank:
        this_data = np.empty((len(res_order)))
        this_data[:] = np.NAN
        data.append(this_data)
    else:
        res_ids_str.pop()

data = np.vstack(tuple(data)).T


if not options.vmax:
    options.vmax = np.ceil(np.max(data) + abs(0 - np.max(data))*0.2)
if not options.vmin:
    options.vmin = np.floor(np.min(data) - abs(0 - np.min(data))*0.2)


spliced_data = splice_data(data, res_id_labels, options.sv)


#Plot the plots
for i in range(len(spliced_data)):
    if("violin" in options.type):
        plot_violin(spliced_data[i][0], 
                    spliced_data[i][1], 
                    options.vmin,
                    options.vmax, 
                    title=options.title,
                    fontsize=options.fontsize)
        plt.savefig("violin_%d_%s" %(i, options.outfile))
        plt.clf()
    
    if("box" in options.type):
        plot_box(spliced_data[i][0],
                spliced_data[i][1], 
                options.vmin,
                options.vmax, 
                title=options.title,
                fontsize=options.fontsize)
        plt.savefig("box_%d_%s" %(i, options.outfile))
        plt.clf()
    
    if("single" in options.type):
        plot_single(spliced_data[i][0], 
                     spliced_data[i][1], 
                     res_order, 
                     options.vmin,
                     options.vmax, 
                     title=options.title, 
                     fontsize=options.fontsize)
        plt.savefig("single_%d_%s" %(i, options.outfile))
        plt.clf()
#def plot_scatter(mat, xlabels, vmin, vmax, title=None, fontsize=8, topmuts=0):

    if("scatter" in options.type):
        plot_scatter(spliced_data[i][0], 
                     spliced_data[i][1], 
                     options.vmin,
                     options.vmax, 
                     title=options.title, 
                     fontsize=options.fontsize,
                     topmuts=options.topmuts)
        plt.savefig("scatter_%d_%s" %(i, options.outfile))
        plt.clf()

    if("stem" in options.type):
        plot_stemplot(spliced_data[i][0],
            spliced_data[i][1], 
            options.vmin,
            options.vmax, 
            title=options.title,
            fontsize=options.fontsize)
        plt.savefig("stem_%d_%s" %(i, options.outfile))
        plt.clf()

    log.info("Plot: " + str(i + 1) + "/" + str(len(spliced_data)))
