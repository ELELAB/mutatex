#!/usr/bin/env python

#    ddg2pdb: plot DDG MutateX results in the B-factor fields of PDB files
#    Copyright (C) 2015, Matteo Tiberti <matteo.tiberti@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
from Bio import PDB

# Add extra ptm residues to PDB.Polypeptide three to one module 
ptm_residues = {"y": "PTR",
                "p": "TPO",
                "s": "SEP",
                "h": "HYP",
                "z": "TYS",
                "k": "MLZ",
                "m": "MLY",
                "l": "M3L",
                "o": "H1S",
                "e": "H2S",
                "f": "H3S"}
len_three2one = len(PDB.Polypeptide.d1_to_index)
idx=len_three2one
for k,v in ptm_residues.iteritems():
    PDB.Polypeptide.d1_to_index[k] = idx
    PDB.Polypeptide.dindex_to_1[idx] = k
    
    PDB.Polypeptide.d3_to_index[v] = idx
    PDB.Polypeptide.dindex_to_3[idx] = v
    idx += 1
    
def get_residue_list(structure, multimers=True):

    models = structure.get_list()

    if len(models) > 1:
        log.warning("%d models are present in the input PDB file; only the first will be used." % len(models))
    if len(models) < 1:
        log.error("The input PDB file does not contain any model. Exiting ...")
        exit(1)

    model = models[0]

    residue_list = []
    residue_ids = []
    sequences = {}

    for chain in model:
        chain_name = chain.get_id()
        sequences[chain_name] = ''
        for residue in chain:
            try:
                res_code = PDB.Polypeptide.three_to_one(residue.get_resname())
            except:
                log.warning("Residue %s in file %s couldn't be recognized; it will be skipped" %(residue, options.pdb))
                continue
            if not multimers:
                residue_list.append(("%s%s%d") % (res_code, chain.get_id(), residue.get_id()[1]))
            else:
                sequences[chain_name] += res_code

    if options.multimers:
        collated_chains = []
        seq_ids, seqs = zip(*list(sequences.iteritems()))
        seq_ids = np.array(seq_ids)
        unique_seqs, unique_idxs = np.unique(seqs, return_inverse=True)

        for i in np.unique(unique_idxs):
            collated_chains.append(seq_ids[unique_idxs == i])

        for cg in collated_chains:
            for model in structure:
                for residue in model[cg[0]]:
                    resid = residue.get_id()[1]
                    try:
                        res_code = PDB.Polypeptide.three_to_one(residue.get_resname())
                    except:
                        log.warning("Residue %s in file %s couldn't be recognized; it will be skipped" %(residue, options.pdb))
                        continue
                    residue_ids.append([(res_code, c, resid) for c in cg])
                    residue_list.append(tuple([ "%s%s%d" % (res_code, c, resid) for c in cg ]))
    return residue_ids, residue_list

def parse_ddg_file(fname, reslist):
    try:
        fh = open(fname, 'r')
    except:
        log.warning("file %s cannot be opened." % fname)
        return None

    ddgs = []
    for line in fh:
        if line and not line.startswith("#"):
            ddgs.append(float(line.split()[0]))

    if len(ddgs) != len(reslist):
        log.error("file %s has %d values, with %d required. Exiting..." % (fname, len(ddgs), len(reslist)))
        exit(1)
    return ddgs

def parse_list_file(fname):
    fh = open(fname, 'r')
    restypes = {}
    i = 0
    for line in fh:
        if line and not line.startswith("#"):
            restypes[line.strip()[0]] = i
            i += 1
    return restypes


LOGFMT = "%(levelname)s: %(message)s"

if not __name__ == "__main__":
    exit()

parser = argparse.ArgumentParser(
description='FoldX DDG parser & plotter',
epilog='''Please notice that cut-offs (i.e. DDG thresholds) are mandatory. In fact,
the program will save for each residue the number of mutations which are
within the specified parameters. You can control this behaviour using options
-a (low threshold), -b (high threshold)  and -t (mode).
By default, the program will consider valid values < low_thr OR (logical) > high_thr.
If -a or -b are not specified, the values of low and high thresholds are defaulted to,
respectively, -99999.0 and 99999.0. If "between" mode is selected
(option -t between), it will consider as valid those values found between the low
and high threshold. For instance, these options generate the relative
validity intervals: -a 0.5 = ]-inf,0.5] U [99999.0,+inf[ ;
-b 0.5 = ]-inf,-99999.0] U [0.5,+inf[;
-a 0.5 -b 1.0 = ]-inf,0.5] U [1.0,+inf[;
-a 0.5 -b 1.0 -t between = [0.5,1.0]
''')

parser.add_argument("-d","--data-directory", dest="dir", type=str, help="input data directory")
parser.add_argument("-p","--input-pdb", dest="in_pdb", help="Input pdb file")
parser.add_argument("-l","--order-list", dest="order",  help="default order list")
parser.add_argument("-m","--matrix", dest="dat", default="ala_scanning.mat", help="output xPyder-compatible matrix")
parser.add_argument("-o","--output-pdb", dest="out_pdb", default="ala_scanning.pdb", help="Output pdb file")
parser.add_argument("-a","--lower-free-energy-threshold", dest="low_thres",  default=-99999.0, type=float, help="lower threhsold; default value: -99999.0")
parser.add_argument("-b","--upper-free-energy-threshold", dest="high_thres", default= 99999.0, type=float, help="upper threhsold; default value: 99999.0")
parser.add_argument("-T","--threshold-mode", dest='thres_mode', choices=['between','outside'], default='outside', action='store', help="threshold mode: between=between upper and lower value, outside: <lower OR >upper")
parser.add_argument("-v","--verbose", dest="verbose", action="store_true", default=False, help="verbose mode")
parser.add_argument("-M","--multimers", dest="multimers", default=True, action='store_false')


# parse ddg files

options = parser.parse_args()

print "AA", options.low_thres, options.high_thres

import numpy as np
import logging as log



if options.verbose:
    log.basicConfig(level=log.INFO,    format=LOGFMT)
else:
    log.basicConfig(level=log.WARNING, format=LOGFMT)


# parse PDB
pdb_parser = PDB.PDBParser()


try:
    structure = pdb_parser.get_structure('s', options.in_pdb)
except:
    log.error("Couldn't open or parse input pdb file. Exiting...")
    exit(1)

res_order = parse_list_file(options.order)
log.info("Residues list is:")
for k,v in sorted(res_order.iteritems(), key=lambda x: x[1]):
    log.info("%d\t%s" % (v+1,k))

res_ids = []

models = structure.get_list()

if len(models) > 1:
    log.warning("%d models are present in the input PDB file; only the first will be used." % len(models))
if len(models) < 1:
    log.error("The input PDB file does not contain any model. Exiting ...")
    exit(1)

model = models[0]

res_ids, res_ids_str = get_residue_list(structure, multimers=options.multimers)
fnames = ["_".join(r) for r in res_ids_str]

log.info("The following files will be considered: %s" % ", ".join(fnames))

data = []

if not options.high_thres and not options.low_thres:
    log.error("Please provide a DDG cut-off (options -a, -b, -t). Exiting...")
    exit(1)
else:
    log.info("Filtering will be performed.")
    log.info("Low threshold: %.2f" % options.low_thres)
    log.info("High threshold: %.2f"% options.high_thres)

if options.thres_mode == 'outside':
    log.info("Mode: outside. Only values > %.2f OR values < %.2f will be considered." % (options.high_thres, options.low_thres))
elif options.thres_mode == 'between':
    log.info("Mode: between. Only values between %.2f and %.2f will be considered." % (options.low_thres, options.high_thres))

for i,r in enumerate(res_ids):
    #try:
    tmp_data = np.array(parse_ddg_file("%s/%s" % (options.dir, fnames[i]), reslist=res_order))
    if options.thres_mode == 'outside':
        processed_data = np.sum(np.logical_or(tmp_data <= options.low_thres, tmp_data >= options.high_thres))
    elif options.thres_mode == 'between':
        processed_data = np.sum(np.logical_and(tmp_data <= options.high_thres, tmp_data >= options.low_thres))

    for sr in r:
        for model in structure:
            for atom in model[sr[1]][sr[2]]:
                atom.set_bfactor(processed_data)

for chain in structure[0]:
    for residue in chain:
        data.append(residue['CA'].get_bfactor())
data = np.array(data)
print data
print options.low_thres, options.high_thres

mat = np.zeros((data.shape[0], data.shape[0]))
np.fill_diagonal(mat, data)

np.savetxt(options.dat, mat, fmt="%.1f")

pdb_io = PDB.PDBIO()
pdb_io.set_structure(structure)
pdb_io.save(options.out_pdb)
