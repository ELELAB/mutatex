#! /usr/bin/env python
#    ddg2xlsx: convert DDG MutateX results to the xlsx format.
#    Copyright (C) 2015, Matteo Tiberti <matteo.tiberti@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


import argparse
from Bio import PDB
from six import iteritems

#Add extra ptm residues to PDB.Polypeptide three to one module 
ptm_residues = {"y": "PTR",
                "p": "TPO",
                "s": "SEP",
                "h": "HYP",
                "z": "TYS",
                "k": "MLZ",
                "m": "MLY",
                "l": "M3L",
                "o": "H1S",
                "e": "H2S",
                "f": "H3S"}
len_three2one = len(PDB.Polypeptide.d1_to_index)
idx=len_three2one
for k,v in iteritems(ptm_residues):
    PDB.Polypeptide.d1_to_index[k] = idx
    PDB.Polypeptide.dindex_to_1[idx] = k
    
    PDB.Polypeptide.d3_to_index[v] = idx
    PDB.Polypeptide.dindex_to_3[idx] = v
    idx += 1

def get_residue_list(structure, multimers=True):

    models = structure.get_list()

    if len(models) > 1:
        log.warning("%d models are present in the input PDB file; only the first will be used." % len(models))
    if len(models) < 1:
        log.error("The input PDB file does not contain any model. Exiting ...")
        exit(1)

    model = models[0]

    residue_list = []
    residue_ids = []
    sequences = {}

    for chain in model:
        chain_name = chain.get_id()
        sequences[chain_name] = ''
        for residue in chain:
            try:
                res_code = PDB.Polypeptide.three_to_one(residue.get_resname())
            except:
                log.warning("Residue %s in file %s couldn't be recognized; it will be skipped" %(residue, options.in_pdb))
                continue
            if not multimers:
                residue_ids.append([(res_code, chain.get_id(), residue.get_id()[1])])
                residue_list.append(("%s%s%d") % (res_code, chain.get_id(), residue.get_id()[1]))
            else:
                sequences[chain_name] += res_code

    if options.multimers:
        collated_chains = []
        seq_ids, seqs = list(zip(*list(iteritems(sequences))))
        seq_ids = np.array(seq_ids)
        unique_seqs, unique_idxs = np.unique(seqs, return_inverse=True)

        for i in np.unique(unique_idxs):
            collated_chains.append(seq_ids[unique_idxs == i])

        for cg in collated_chains:
            for model in structure:
                for residue in model[cg[0]]:
                    resid = residue.get_id()[1]
                    try:
                        res_code = PDB.Polypeptide.three_to_one(residue.get_resname())
                    except:
                        log.warning("Residue %s in file %s couldn't be recognized; it will be skipped" %(residue, options.in_pdb))
                        continue
                    residue_ids.append([(res_code, c, resid) for c in cg])
                    residue_list.append(tuple([ "%s%s%d" % (res_code, c, resid) for c in cg ]))
    return residue_ids, residue_list

def parse_ddg_file(fname, reslist):
    fh = open(fname, 'r')
    ddgs = []
    for line in fh:
        if line and not line.startswith("#"):
            ddgs.append(float(line.split()[0]))

    if len(ddgs) != len(reslist):
        log.error("file %s has %d values, with %d required. Exiting..." % (fname, len(ddgs), len(reslist)))
        exit(1)
    return ddgs

def parse_list_file(fname):
    fh = open(fname, 'r')
    restypes = []
    for line in fh:
        if line and not line.startswith("#"):
            restypes.append(line.strip()[0])
    return restypes

LOGFMT = "%(levelname)s: %(message)s"

if not __name__ == "__main__":
    exit()

parser = argparse.ArgumentParser(
description='FoldX DDG converter to the OOXML xlsx format',)

parser.add_argument("-p","--pdb", dest="in_pdb", help="Input pdb file")
parser.add_argument("-d","--data-directory", dest="dir", type=str, help="input data directory")
parser.add_argument("-l","--order-list", dest="order",  help="default order list")
parser.add_argument("-v","--verbose", dest="verbose", action="store_true", default=False, help="verbose mode")
parser.add_argument("-o","--output", dest="outfile", action='store', default='energies.xlsx')
parser.add_argument("-T","--transpose",dest='transpose',action="store_true",default=False,help="Swap rows and columns")
parser.add_argument("-M","--multimers", dest="multimers", default=True, action='store_false')


# parse ddg files

options = parser.parse_args()

import numpy as np
import logging as log
import openpyxl as pyxl


if options.verbose:
    log.basicConfig(level=log.INFO,    format=LOGFMT)
else:
    log.basicConfig(level=log.WARNING, format=LOGFMT)



res_order = parse_list_file(options.order)

log.info("Residues list is:")
for i,r in enumerate(res_order):
    log.info("%d\t%s" % (i,r))


# parse PDB
pdb_parser = PDB.PDBParser()

#if True:
try:
    structure = pdb_parser.get_structure('s', options.in_pdb)
#else:
except:
    log.error("Couldn't open or parse input pdb file. Exiting...")
    exit(1)

res_ids = []

models = structure.get_list()

if len(models) > 1:
    log.warning("%d models are present in the input PDB file; only the first will be used." % len(models))
if len(models) < 1:
    log.error("The input PDB file does not contain any model. Exiting ...")
    exit(1)

model = models[0]

res_ids, res_ids_str = get_residue_list(structure, multimers=options.multimers)


max_len_res_ids = np.max([len(r) for r in res_ids])
if options.multimers:
    fnames = ["_".join(r) for r in res_ids_str]
    res_id_labels = [", ".join(r) for r in res_ids_str]
else:
    fnames = res_ids_str
    res_id_labels = res_ids_str
    

data = []

log.info("The following files will be considered: %s" % ", ".join(res_id_labels))

for i,f in enumerate(fnames):
    data.append(np.array(parse_ddg_file("%s/%s" % (options.dir, f), reslist=res_order, )))

wb = pyxl.Workbook()
#ws = wb.create_sheet(0)
ws = wb.get_sheet_by_name('Sheet')
ws.title = 'FoldX mutations DDG'

#prepare header
for i in range(max_len_res_ids):
    offset=i*3
    if options.transpose:
        ws.cell(row=1+offset, column=1).value = "WT Residue type"
        ws.cell(row=1+offset+1, column=1).value = "Chain ID"
        ws.cell(row=1+offset+2, column=1).value = "Residue #"
    else:
        ws.cell(row=1, column=1+offset).value = "WT Residue type"
        ws.cell(row=1, column=1+offset+1).value = "Chain ID"
        ws.cell(row=1, column=1+offset+2).value = "Residue #"

offset = 0
for i,resset in enumerate(res_ids):
    for j,res in enumerate(resset):
        offset = j*3
        if options.transpose:
            ws.cell(row=1+offset,  column=1+i+1).value = res[0]
            ws.cell(row=1+offset+1,column=1+i+1).value = res[1]
            ws.cell(row=1+offset+2,column=1+i+1).value = res[2]
        else:
            ws.cell(row=1+i+1,column=1+offset  ).value = res[0]
            ws.cell(row=1+i+1,column=1+offset+1).value = res[1]
            ws.cell(row=1+i+1,column=1+offset+2).value = res[2]
offset += 3
for i,mut in enumerate(res_order):
    if options.transpose:
        ws.cell(row=1+i+offset,column=1).value = mut
    else:
        ws.cell(row=1,column=1+i+offset).value = mut

for i,res in enumerate(res_ids):
    for j,ddg in enumerate(data[i]):
        if options.transpose:
            ws.cell(row=1+j+offset, column=1+i+1).value = ddg
        else:
            ws.cell(row=1+i+1, column=1+j+offset).value = ddg

wb.save(options.outfile)
