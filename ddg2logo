#!/usr/bin/env python

#    ddg2matrix: plot DDG MutateX results as heat logo plots.
#    Copyright (C) 2015, Matteo Tiberti <matteo.tiberti@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

letters = (
    'iVBORw0KGgoAAAANSUhEUgAAEsAAAACWCAMAAABJTwrVAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFn',
    'ZVJlYWR5ccllPAAAAyhpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/',
    'IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6',
    'bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTExIDc5LjE1ODMyNSwgMjAxNS8w',
    'OS8xMC0wMToxMDoyMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9y',
    'Zy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIg',
    'eG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDov',
    'L25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20v',
    'eGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9w',
    'IENDIDIwMTUgKE1hY2ludG9zaCkiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MkJGODI0RjkzRjAx',
    'MTFFOEI1RThCQkM4QzdDQkIwNDciIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MkJGODI0RkEzRjAx',
    'MTFFOEI1RThCQkM4QzdDQkIwNDciPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0i',
    'eG1wLmlpZDoyQkY4MjRGNzNGMDExMUU4QjVFOEJCQzhDN0NCQjA0NyIgc3RSZWY6ZG9jdW1lbnRJRD0i',
    'eG1wLmRpZDoyQkY4MjRGODNGMDExMUU4QjVFOEJCQzhDN0NCQjA0NyIvPiA8L3JkZjpEZXNjcmlwdGlv',
    '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',
    '2bNQgPU/AQYAewpuSQ4tK0oAAAAASUVORK5CYII=',
    )

import argparse
import base64
import matplotlib
import StringIO
import csv
matplotlib.use('PDF')
from matplotlib.image import imread
from Bio import PDB

#Add extra ptm residues to PDB.Polypeptide three to one module 
ptm_residues = {"y": "PTR",
                "p": "TPO",
                "s": "SEP",
                "h": "HYP",
                "z": "TYS",
                "k": "MLZ",
                "m": "MLY",
                "l": "M3L",
                "o": "H1S",
                "e": "H2S",
                "f": "H3S"}
len_three2one = len(PDB.Polypeptide.d1_to_index)
idx=len_three2one
for k,v in ptm_residues.iteritems():
    PDB.Polypeptide.d1_to_index[k] = idx
    PDB.Polypeptide.dindex_to_1[idx] = k
    
    PDB.Polypeptide.d3_to_index[v] = idx
    PDB.Polypeptide.dindex_to_3[idx] = v
    idx += 1


def get_residue_list(structure, multimers=True):

    models = structure.get_list()

    if len(models) > 1:
        log.warning("%d models are present in the input PDB file; only the first will be used." % len(models))
    if len(models) < 1:
        log.error("The input PDB file does not contain any model. Exiting ...")
        exit(1)

    model = models[0]

    residue_list = []
    sequences = {}

    for chain in model:
        chain_name = chain.get_id()
        sequences[chain_name] = ''
        for residue in chain:
            try:
                res_code = PDB.Polypeptide.three_to_one(residue.get_resname())
            except:
                log.warning("Residue %s in file %s couldn't be recognized; it will be skipped" %(residue, options.pdb))
                continue
            if not multimers:
                residue_list.append(("%s%s%d") % (res_code, chain.get_id(), residue.get_id()[1]))
            else:
                sequences[chain_name] += res_code

    if options.multimers:
        collated_chains = []
        seq_ids, seqs = zip(*list(sequences.iteritems()))
        seq_ids = np.array(seq_ids)
        unique_seqs, unique_idxs = np.unique(seqs, return_inverse=True)

        for i in np.unique(unique_idxs):
            collated_chains.append(seq_ids[unique_idxs == i])

        for cg in collated_chains:
            for model in structure:
                for residue in model[cg[0]]:
                    resid = residue.get_id()[1]
                    try:
                        res_code = PDB.Polypeptide.three_to_one(residue.get_resname())
                    except:
                        log.warning("Residue %s in file %s couldn't be recognized; it will be skipped" %(residue, options.pdb))
                        continue
                    residue_list.append(tuple([ "%s%s%d" % (res_code, c, resid) for c in cg ]))
    return residue_list

def parse_letters_png(pngfile, letters="ACDEFGHIKLMNPQRSTVWXYypshzkmloef"):
    if type(pngfile) is tuple:
        pngfile = StringIO.StringIO(base64.b64decode("".join(pngfile)))

    png = imread(pngfile)
    side_length = png.shape[0]
    if png.shape[1]%png.shape[0] != 0:
        log.error("Input PNG file doesn't have the right shape (horizontal size is expected to be a multplie of vertical size)")
        raise TypeError


    if png.shape[1]/png.shape[0] != len(letters):
        log.error("Input PNG file does not contain the right number of letters")
        raise TypeError


    out = {}
    for i,l in enumerate(letters):
        out[l] = png[:,i*side_length:(i+1)*side_length,:]

    return out

def parse_ddg_file(fname, reslist):
    try:
        fh = open(fname, 'r')
    except:
        log.warning("file %s cannot be opened." % fname)
        return None

    ddgs = []
    for line in fh:
        if line and not line.startswith("#"):
            ddgs.append(float(line.split()[0]))

    if len(ddgs) != len(reslist):
        log.error("file %s has %d values, with %d required. Exiting..." % (fname, len(ddgs), len(reslist)))
        exit(1)
    return ddgs

def parse_list_file(fname):
    fh = open(fname, 'r')
    restypes = []
    for line in fh:
        if line and not line.startswith("#"):
            restypes.append(line.strip()[0])
    return restypes

def plot_matrix(mat, reslist, letters, xlabels, title=None, fontsize=8, hgap=0.5, vgap=0.1, threshold=0.0):

    width = 1.0
    offset = width/2.0

    xticks = np.arange(hgap, mat.shape[0]*width + mat.shape[0]*hgap, width+hgap) + offset

    if title is None:
        title = ""

    plt.title(title)

    s = np.arange(mat.shape[1])

    fig, ax = plt.subplots(1, 1)

    acc_max = 0
    acc_min = 0

    accs = []

    for x,c in enumerate(mat):

        pos_idx = np.where(c >= 0.0)
        local_pos_idx = np.argsort(c[pos_idx])[::-1]
        s_pos_idx = pos_idx[0][local_pos_idx]

        neg_idx = np.where(c < 0.0)
        local_neg_idx = np.argsort(c[neg_idx])
        s_neg_idx = neg_idx[0][local_neg_idx]

        #ax.axvline(xticks[x], linewidth=0.5)

        vgaps = (vgap, -vgap)
        for s,t in enumerate([s_pos_idx, s_neg_idx]):
            this_vgap = vgaps[s]
            accumulator = this_vgap
            for i in t:
                if np.abs(c[i]) < threshold or c[i] is np.nan or c[i] == 0.0:
                    continue
                low_y = accumulator + this_vgap
                accumulator += c[i]
                if s == 0:
                    ax.imshow(letters[reslist[i]], extent=(hgap + x*width + x*hgap, hgap + (x+1)*width + x*hgap, low_y, accumulator), interpolation='nearest', aspect='auto')
                else:
                    ax.imshow(letters[reslist[i]][::-1,:,:], extent=(hgap + x*width + x*hgap, hgap + (x+1)*width + x*hgap, low_y, accumulator), interpolation='nearest', aspect='auto')
            accs.append(accumulator)
            if accumulator > acc_max:
                acc_max = accumulator
            if accumulator < acc_min:
                acc_min = accumulator

    acc_min -= 5*vgap
    acc_max += 5*vgap

    #ax.set_yticks([0])
    #ax.set_yticklabels("0")
    ax.axhline(linewidth=2, color="r")
    ax.set_ylabel(r'FoldX $\Delta\Delta{}G (kcal/mol)$')

    ax.set_xlim((0, mat.shape[0]*width +hgap*mat.shape[0] + hgap))
    ax.set_ylim((acc_min, acc_max))

    ax.set_xticks(xticks)
    ax.set_xticklabels(xlabels)
    """
    ax.tick_params(
        axis='y',
        which='both',
        left='on',
        right='off',
        labelleft='off',
        labelright='off')
    """
    plt.setp(ax.get_xticklabels(), size=fontsize, rotation=90)
    plt.tight_layout()

    return fig



def splice_data(data, labels, sv):

    out = []

    if data.shape[0] <= sv:
        return [[data, labels]]

    nsplice = data.shape[0] / int(sv)
    rest =    data.shape[0] % int(sv)

    if rest != 0:
        nsplice += 1

    for i in range(nsplice):
        out.append([
                data[i*sv:(i+1)*sv,:],
                labels[i*sv:(i+1)*sv]
            ])

    return out



LOGFMT = "%(levelname)s: %(message)s"

if not __name__ == "__main__":
    exit()

parser = argparse.ArgumentParser(
description='FoldX DDG converter to the OOXML xlsx format',)

parser.add_argument("-p","--pdb", dest="in_pdb", help="Input pdb file")
parser.add_argument("-d","--data-directory", dest="dir", type=str, help="input data directory")
parser.add_argument("-m","--include-invalid-files",dest='includeblank',action='store_true', default=False, help="Include empty columns in output instead of ignoring missing files")
parser.add_argument("-l","--order-list", dest="order",  help="default order list")
parser.add_argument("-b","--label-list", dest="labels", help="residue label list")
parser.add_argument("-v","--verbose", dest="verbose", action="store_true", default=False, help="verbose mode")
parser.add_argument("-o","--output", dest="outfile", action='store', default='energies')
parser.add_argument("-t","--threshold", dest="threshold", action='store', type=float, default=0.5, help="Do not consider mutations with absolute DDG lower than this value")
parser.add_argument("-i","--title", dest='title', action='store', default=None, type=str, help="Title for the output image file")
parser.add_argument("-c","--png-letter-map",dest='pngfile',action='store', default=letters, help="png file to be used for letters")
parser.add_argument("-s","--splice",dest='sv',action='store', type=int, default=20, help="Number of residues for each single image")
parser.add_argument("-f","--fontsize",dest='fontsize',action='store', type=int, default=8, help="Font size")
parser.add_argument("-D","--dpi", dest="dpi", type=float, action='store', default=150, help="number of DPI for the output image. !!WARNING!! Saving the images at higher DPI (as 300) uses a lot of memory, therefore use with caution" )
parser.add_argument("-a","--multimers", dest="multimers", default=True, action='store_false')
options = parser.parse_args()

import numpy as np
import logging as log
import os
from Bio import PDB
from matplotlib import pyplot as plt

#Add extra ptm residues to PDB.Polypeptide three to one module 
ptm_residues = {"y": "PTR",
                "p": "TPO",
                "s": "SEP",
                "h": "HYP",
                "z": "TYS",
                "k": "MLZ",
                "m": "MLY",
                "l": "M3L",
                "o": "H1S",
                "e": "H2S",
                "f": "H3S"}
len_three2one = len(PDB.Polypeptide.d1_to_index)
idx=len_three2one
for k,v in ptm_residues.iteritems():
    PDB.Polypeptide.d1_to_index[k] = idx
    PDB.Polypeptide.dindex_to_1[idx] = k
    
    PDB.Polypeptide.d3_to_index[v] = idx
    PDB.Polypeptide.dindex_to_3[idx] = v
    idx += 1


if options.verbose:
    log.basicConfig(level=log.INFO,    format=LOGFMT)
else:
    log.basicConfig(level=log.WARNING, format=LOGFMT)


if True:
    letters = parse_letters_png(options.pngfile)
else:
    exit(1)



res_order = parse_list_file(options.order)

log.info("Residues list is:")
for i,r in enumerate(res_order):
    log.info("%d\t%s" % (i,r))

pdb_parser = PDB.PDBParser()

try:
    structure = pdb_parser.get_structure('s', options.in_pdb)
except:
    log.error("Couldn't open or parse input pdb file. Exiting...")
    exit(1)

res_ids_str = []
data = []

models = structure.get_list()

if len(models) > 1:
    log.warning("%d models are present in the input PDB file; only the first will be used." % len(models))
if len(models) < 1:
    log.error("The input PDB file does not contain any model. Exiting ...")
    exit(1)

model = models[0]

res_ids_str = get_residue_list(structure, multimers=options.multimers)


if options.multimers:
    fnames = ["_".join(r) for r in res_ids_str]
    res_id_labels = [", ".join(r) for r in res_ids_str]
else:
    fnames = res_ids_str
    res_id_labels = res_ids_str

#Assign custom residue labels
if options.labels:
    label_dict = {}
    with open(options.labels, 'rb') as csvfile:
        csv_reader = csv.reader(csvfile, delimiter=',', quotechar='|')
        for row in csv_reader:
            if row[1] != '':
                label_dict[row[0]] = row[1]    
    for i in range(len(fnames)):
        if fnames[i] in label_dict:
            res_id_labels[i] = label_dict[fnames[i]]


data = []
for fname in fnames:
    this_data = parse_ddg_file("%s/%s" % (options.dir, fname), reslist=res_order)

    if this_data:
        data.append(np.array(this_data))
        continue
    elif options.includeblank:
        this_data = np.empty((len(res_order)))
        this_data[:] = np.NAN
        data.append(this_data)
    else:
        res_ids_str.pop()

data = np.vstack(tuple(data))

spliced_data = splice_data(data, res_id_labels, options.sv)

for i in range(len(spliced_data)):
    fig = plot_matrix(spliced_data[i][0],
                res_order,
                letters,
                spliced_data[i][1],
                title=options.title,
                fontsize=options.fontsize,
                threshold=options.threshold)
    plt.show()
    fig.savefig("%d_%s.pdf" %(i, options.outfile), dpi=options.dpi)
