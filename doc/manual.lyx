#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{color}
\usepackage{dirtree}
\definecolor{lgray}{gray}{0.7}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "basicstyle={\small\ttfamily},framexleftmargin=5mm,frame=shadowbox,rulesepcolor={\color{lgray}}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
MutateX
\end_layout

\begin_layout Date
Matteo Tiberti
\end_layout

\begin_layout Date
4/11/2015
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Section
Requirements
\end_layout

\begin_layout Standard
MutateX and the associated scripts are written in Python, and requires having
 a working Python 2.x (x >= 7) installation.
 A number of Python packages needs also to be available.
 More in details, mutateX requires:
\end_layout

\begin_layout Itemize
BioPython
\end_layout

\begin_layout Itemize
numpy
\end_layout

\begin_layout Standard
Additionally, ddg2matrix requires
\end_layout

\begin_layout Itemize
matplotlib
\end_layout

\begin_layout Standard
and ddg2xlsx requires
\end_layout

\begin_layout Itemize
openpyxl
\end_layout

\begin_layout Standard
All the mentioned packages are available for free for Linux, Windows and
 OSX.
 Once these requirements have been satisfied, all the MutateX scripts can
 be run.
 Nonetheless, since MutateX works by running the FoldX software, the FoldX
 binary and the associated rotabase.txt file should be available.
 Please refer to the FoldX website ( http://http://foldx.crg.es ) to aquire
 a copy.
 The only currently supported version is FoldX 3.0 beta 6.1 (i.
 e.
 the latest version as for 10/06/2015), and we plan on supporting newer
 versions as soon as they are released.
 The FoldX binary file should be readable and executable by the user who
 intends to run MutateX, and its location as well as that of the rotabase.txt
 file should be known.
\end_layout

\begin_layout Section
Installation
\begin_inset CommandInset label
LatexCommand label
name "sec:Installation"

\end_inset


\end_layout

\begin_layout Standard
In order to install MutateX just follow these simple steps.
\end_layout

\begin_layout Enumerate
MutateX requires a FoldX installation; please refer to the FoldX website
 (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://http://foldx.crg.es
\end_layout

\end_inset

) to aquire a copy of the program and for installation instructions.
 Once FoldX is installed, take note of the position of the FoldX binary
 (foldx3b6 for version 3.0 beta 6.1) and the associated rotabase file (rotabase.txt
).
\end_layout

\begin_layout Enumerate
Install the MutateX tools.
 First, download the package from the associated github repository ( https://git
hub.com/ELELAB/mutatex ) and unzip it, or clone the repository using git
 by running 
\family typewriter

\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ git clone https://github.com/ELELAB/mutatex.git
\end_layout

\end_inset


\family default
.
 In any case, you should end up with a directory named mutatex or mutatex-master
 containing the relevant scripts and files.
 Move this directory wherever you like and add the directory to your PATH.
 For instance, for a system-wide installation, a user with administrative
 access could move it under /usr/local/, and add this directory to the path
 by running
\family typewriter

\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ export PATH=$PATH:/usr/local/mutatex/ 
\end_layout

\end_inset


\family default
in this case, the export line above should be added to the .profile or .bashrc
 file in the user's home, so that it's automatically run every time the
 terminal is opened.
 Please notice that changes to the .bashrc or .profile files only take effect
 in terminals opened after the files have been modified.
\end_layout

\begin_layout Enumerate
This step is optional, but strongly advised.
 MutateX needs to know the location of the FoldX binary and rotabase.txt
 file in order to work.
 MutateX first looks for the location of this files by looking at the content
 of the FOLDX_BINARY and FOLDX_ROTABASE system variables.
 Therefore, it is advisable to set these system variables in the .profile
 or .bashrc file in the user home, so that they the set everytime a terminal
 is opened.
 This is carried out by adding the following lines to the .profile or .bashrc
 file in their home directory, for instance:
\family typewriter

\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ export FOLDX_BINARY=/usr/local/foldx/foldx3b6
\end_layout

\begin_layout Plain Layout

$ export FOLDX_ROTABASE=/usr/local/foldx/rotabase.txt
\end_layout

\end_inset


\family default
Remember that changes to the .bashrc or .profile files only take effect in
 terminals opened after the files have been modified.
 If this step is not carried out the user will have to provide the localtion
 of the FoldX binary and the rotabase.txt file to the mutatex script each
 time it is run (more information about this in the next sections).
\end_layout

\begin_layout Standard
It is done! Now you should be able to run the mutatex script from every
 directory of your system.
 In order to verify your installation, you can run
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ mutatex --help
\end_layout

\end_inset

which should print the MutateX help.
\end_layout

\begin_layout Section
Running calculations with MutateX
\end_layout

\begin_layout Subsection
The MutateX protocol
\begin_inset CommandInset label
LatexCommand label
name "subsec:The-MutateX-protocol"

\end_inset


\end_layout

\begin_layout Standard
MutateX uses FoldX to systematically calculate the difference in free energy
 of unfolding (
\begin_inset Formula $\Delta\Delta G$
\end_inset

) between the wild-type and a number of mutated variants using the <BuildModel>
 option.
 More in details, one or more protein models provided by the user are mutated
 sequentially by indipendently changing the residue at each position of
 the protein sequence to another aminoacid.
 The list of residues that each position will be mutated to can be provided
 by the user, or defaults to the list of 20 canonical aminoacids found in
 proteins.
 For instance, the user can provide a PDB file containing the structure
 of a 50-residues protein, and demand each of them to be changed to ALA,
 PHE and ASP.
 In this case, 150 (50*3) FoldX runs will be performed and the FoldX 
\begin_inset Formula $\Delta\Delta G$
\end_inset

 value calculated for each of them.
 The protocol followed by MutateX can be summarized as follows:
\end_layout

\begin_layout Enumerate
Load and check the structure(s).
 One (or more) PDB file containing one (or more) models may be employed.
 Here, each model from each file is checked for consistence in the context
 of FoldX mutagenesis.
\end_layout

\begin_layout Enumerate
Repair.
 Each model is subject to a Repair run in which residues having bad torsion
 angles, Van der Waals clashes or bad total energy are modified to more
 reasonable conformations.
 This uses the <RepairPDB> directive of FoldX.
 
\end_layout

\begin_layout Enumerate
Mutate.
 Each residue at every position is indipendently is mutated to a number
 of selected aminoacids as previously detailed, and 
\begin_inset Formula $\Delta\Delta G$
\end_inset

 values are calculated.
\end_layout

\begin_layout Enumerate
Report.
 The 
\begin_inset Formula $\Delta\Delta G$
\end_inset

 are gathered in a user-friendly collection of text files.
 Also, 
\begin_inset Formula $\Delta\Delta G$
\end_inset

 values are averaged among the mutations calculated on different models
 and the values are reported.
\end_layout

\begin_layout Subsection
Required files
\begin_inset CommandInset label
LatexCommand label
name "subsec:Required-files"

\end_inset


\end_layout

\begin_layout Standard
The following files are required for a MutateX run:
\end_layout

\begin_layout Itemize
The FoldX binary file and rotabase.txt must be available to MutateX.
 By default, MutateX reads the content of the FOLDX_BINARY and FOLDX_ROTABASE
 system variables in order to determine their position (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Installation"

\end_inset

 for details).
 If any of those variables is empty, the position of the respective file
 can be supplied through the –foldx-binary or –rotabase command line options,
 respectively.
 If the command line options are supplied the content of the system variables
 is ignored.
 
\end_layout

\begin_layout Itemize
One (or more) PDB file, containing one (or more) models of the protein to
 be mutated.
 The PDB files need to adhere to the following guidelines:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
The models should all have the same sequence.
 If this not the case, MutateX will detect the problem and ignore residues
 which are not in common among all the models supplied.
 
\end_layout

\begin_layout Itemize
The chain identifier should be provided for all the models.
 If this is not the case, MutateX will assign a default 
\begin_inset Quotes eld
\end_inset

A
\begin_inset Quotes erd
\end_inset

 chain identifiers to all the residues wihtout it.
 Therefore, this is especially important if the supplied models have more
 than one chain.
\end_layout

\begin_layout Itemize
The PDB file should contain exclusively residues recognized by FoldX.
 See the FoldX 3b6 manual pages 33-34 for a complete list.
 Also notice that residues (even those with post-translational modifications
 such as phosphorilated residues) should be defined as whole residues under
 a single residues identifier.
 For instance, phosphorylated residues where the phosphate group is separated
 from the residue and defined as HETATM at the end of the PDB are not recognized
 correctly.
 See the FoldX 3b6 manual page 35 for details.
\end_layout

\begin_layout Itemize
The number of residues or atoms should monotonically increase progressing
 along the molecule (e.g., the first four residues of a chain should follow
 the order 1-2-3-4, and 1-3-2-4 is not ammissible.
 See the FoldX 3b6 manual page 35 for details.
\end_layout

\end_deeper
\begin_layout Itemize
Two template files: one for the repair and one for the mutation runs.
 These should be named, respectively, repair_runfile_template.txt and mutate_runf
ile_template.txt.
 MutateX looks for these files in the working directory (i.e.
 where it is run).
 Nonetheless, it is also possible to specify custom filenames or locations
 using the –repair-runfile-template and –mutate-runfile-template options.
 Two examples of these template files are available within the MutateX package.
 These are normal FoldX RunFiles that perform a <PDBRepair> and <BuildModel>
 respectively, except for two details.
 In the two files, one 
\begin_inset Quotes eld
\end_inset

$PDBS$
\begin_inset Quotes erd
\end_inset

 and one 
\begin_inset Quotes eld
\end_inset

$NRUNS$
\begin_inset Quotes erd
\end_inset

 strings are present.
 These have to remain as such for MutateX to work correctly (i.e.
 the user should not modify the respective lines).
 Nonetheless, the user is free to modify all the other options as fit for
 the task at hand.
 
\end_layout

\begin_layout Itemize
Optionally, one mutations list file (usually named mutations_list.txt).
 This file specifies the ordered list of residue types that each residue
 of the input models should mutated to in order to calculate the values
 of 
\begin_inset Formula $\Delta\Delta G$
\end_inset

 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:The-MutateX-protocol"

\end_inset

 for details).
 The same order is also used in the output of the reporting of 
\begin_inset Formula $\Delta\Delta G$
\end_inset

.
 The file is a list of canonical aminoacids specified in the single-letter
 code, one per line.
 Each line should begin with the single-letter specifying the aminoacid
 type, and all the other characters are not considered.
 For instance, one could use:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

A
\end_layout

\begin_layout Plain Layout

C
\end_layout

\begin_layout Plain Layout

D
\end_layout

\begin_layout Plain Layout

E
\end_layout

\end_inset

as well as
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

A (Alanine)
\end_layout

\begin_layout Plain Layout

C (Cysteine)
\end_layout

\begin_layout Plain Layout

D (Aspartate)
\end_layout

\begin_layout Plain Layout

E (Glutamate)
\end_layout

\end_inset


\series bold
only the first letter matters
\series default
.
 Be careful: this means that a mutations list file like
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ALA
\end_layout

\begin_layout Plain Layout

CYS
\end_layout

\begin_layout Plain Layout

ASP
\end_layout

\begin_layout Plain Layout

GLU
\end_layout

\end_inset

would be the same as
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

A (Ala)
\end_layout

\begin_layout Plain Layout

C (Cys)
\end_layout

\begin_layout Plain Layout

A (Ala)
\end_layout

\begin_layout Plain Layout

G (Gly)
\end_layout

\end_inset

The mutation list file is provided by the user using the –mutlist command
 line option.
 If this option is not specified, the default mutation list will be used,
 which is:
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

G
\end_layout

\begin_layout Plain Layout

A
\end_layout

\begin_layout Plain Layout

V
\end_layout

\begin_layout Plain Layout

L
\end_layout

\begin_layout Plain Layout

I
\end_layout

\begin_layout Plain Layout

M
\end_layout

\begin_layout Plain Layout

F
\end_layout

\begin_layout Plain Layout

W
\end_layout

\begin_layout Plain Layout

P
\end_layout

\begin_layout Plain Layout

S
\end_layout

\begin_layout Plain Layout

T
\end_layout

\begin_layout Plain Layout

C
\end_layout

\begin_layout Plain Layout

Y
\end_layout

\begin_layout Plain Layout

N
\end_layout

\begin_layout Plain Layout

Q
\end_layout

\begin_layout Plain Layout

D
\end_layout

\begin_layout Plain Layout

E
\end_layout

\begin_layout Plain Layout

K
\end_layout

\begin_layout Plain Layout

R
\end_layout

\begin_layout Plain Layout

H 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Running MutateX
\end_layout

\begin_layout Subsubsection
Basic usage
\end_layout

\begin_layout Standard
If everything is set up as described in sections 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Installation"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Required-files"

\end_inset

, the simplest MutateX command is simply:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mutatex single_model.pdb
\end_layout

\end_inset


\end_layout

\begin_layout Standard
More than one file may be supplied at once:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mutatex single_model1.pdb single_model2.pdb
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Please notice that each PDB file is required to contain only one model,
 and MutateX will complain and exit if this not the case.
 This is because we require the user to acknowledge that he is using multi-model
 files, and that all the models in the provided PDB file will be used.
 This is performed by adding an option to the command:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mutatex single_model1.pdb multiple_models.pdb --multiple-models
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you have a multi-core machine (as you most probably have) you can greatly
 shorten the calculation times by allowing MutateX to run more than one
 instance of FoldX at the same time, using option –np, which specifies the
 number of cores to be used at the same time:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mutatex single_model.pdb --np 4
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can also specify a customized mutation list file:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mutatex single_model.pdb --np 4 --mutlist mutations_list.txt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That's about it.
 We will now cover more advanced usage of MutateX in the following section;
 you can skip to section XX to understand the structure of the output files
 and directories.
\end_layout

\begin_layout Subsubsection
Other options
\begin_inset CommandInset label
LatexCommand label
name "subsec:Other-options"

\end_inset


\end_layout

\begin_layout Standard
In this section, several options available in MutateX are described.
 Some options will be skipped entirely, as have already been covered in
 previous sections of the manual.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

--skip-check
\end_layout

\begin_layout Plain Layout

--skip-repair
\end_layout

\begin_layout Plain Layout

--skip-mutate
\end_layout

\begin_layout Plain Layout

--skip-report
\end_layout

\end_inset

This group of options allows to skip entirely one phase of the calculation.
 This is useful for instance if you want to manually modify something in
 the results between one stage and the other (e.g.
 if you want to complete a MutateX run that was already done elsewhere,
 or if you want to replace the input PDBs for the mutate phase).
 Please notice that MutateX will expect to find the files it would have
 generated in the sections that have been skipped, with correct filenames
 and directory structure.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

--nruns NRUNS
\end_layout

\end_inset

This is the number of mutation runs to be performed by MutateX per position
 and residue type of mutation.
 As stated in the FoldX manual (page 27), 
\begin_inset Quotes eld
\end_inset

Normally it should be set to 1.
 However, sometimes it can be set to higher numbers (typically 5) to see
 if the algorithm has achieved convergence, or in other words if the solution
 offered is the optimal or a trapped solution.
 When it is larger than 1 the algorithm will do the same mutations but changing
 the rotamer set used and the order of the moves.
 In this way other alternative solutions could be explored.
 For most of the mutations this will not result in significant differences
 from one run to the other.
 However, in some cases, like mutations involving Arg neighbours with a
 large degree of freedom, significant differences could be found.
\begin_inset Quotes erd
\end_inset

.
 As to keep the FoldX run as informative as possible, we have decided to
 set this value to 5 by default.
 The user can however use the –nruns option to change this behavior.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

--foldx-version {3b6}
\end_layout

\end_inset

This option is used to tell MutateX which FoldX version it should expect.
 Right now, only version 3 beta 6 is supported.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

--verbose
\end_layout

\end_inset

Activate verbose mode, off by default.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

--foldx-log
\end_layout

\end_inset

Write the standard output of the FoldX runs to a log file in the run directories.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

--use-links
\end_layout

\end_inset

Make links instead of copying files around to save on disk space.
 Use this option only if you really have to; FoldX has been reported to
 crash when using links instead of files, especially for the rotabase.txt
 file.
\end_layout

\begin_layout Subsection
Interrupting and restarting a MutateX run
\end_layout

\begin_layout Standard
In order to interrupt a MutateX run just kill the MutateX script right away.
 If you do this, it is possible that some of the remaining FoldX processes
 will continue running; if this is the case just kill them manually or wait
 for them to finish.
 It is advisable to wait for all the FoldX processes involved in the present
 calculation to end before rerunning it, otherwise two FoldX processes might
 be tempted to read/write in the same directory with unpredictable results.
\end_layout

\begin_layout Standard
If you kill a MutateX run, you don't have to repeat it from scratch.
 Just enter the directory where the job was running and launch 
\emph on
the very same
\emph default
 MutateX command line (therefore, it is advisable to save it in a bash script
 that will be used to run the program).
 MutateX will automatically understand what has been already done and what's
 missing, and will restart from where he had left.
 Be careful though; you shouldn't modify any of the input our outpur file
 of FoldX for the restart to work as expected.
 FoldX is able to recognize certain inconsistencies between the available
 input and the available finished FoldX runs, but mostly expects that the
 same command with same input has been issued.
\end_layout

\begin_layout Standard
The fact that MutateX supports smart restarting means that you should 
\emph on
never run two different MutateX calculations in the same working directory
\emph default
.
\end_layout

\begin_layout Section
MutateX Output
\end_layout

\begin_layout Standard
MutateX automatically prepares the FoldX runs necessary for the completion
 of the complete mutation scan, meaning that it writes a number of directories
 and files on disk.
 By default, the four FoldX phases (as described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:The-MutateX-protocol"

\end_inset

) are run one after the other, as each of the requires the output of the
 previous phase (expect for the first one - which is completely optional).
\end_layout

\begin_layout Standard
From this moment on, each phase will be illustrated using as example a generic
 PDB named 
\begin_inset Quotes eld
\end_inset

structure.pdb
\begin_inset Quotes erd
\end_inset

 as example.
 This generic PDB file contains a single model containing a single chain
 (
\begin_inset Quotes eld
\end_inset

A
\begin_inset Quotes erd
\end_inset

) with six residues having a specific protein sequence (MATELE), and residues
 having residue number from 1 to 6.
\end_layout

\begin_layout Standard
In the following description, we will often refer to the 
\begin_inset Quotes eld
\end_inset

current working directory
\begin_inset Quotes erd
\end_inset

: this is the directory in which the input files are present and from which
 MutateX has been launched.
 It will be also referred as CWD for convenience.
\end_layout

\begin_layout Subsection
Phase 1: Preliminary operations and model check
\begin_inset CommandInset label
LatexCommand label
name "subsec:Phase-0:-Preliminary"

\end_inset


\end_layout

\begin_layout Standard
MutateX first reads the PDB file(s) it will work on.
 If –skip-check is not used, a check and preliminary fix of the models will
 be performed, namely:
\end_layout

\begin_layout Itemize
The default chain name 
\begin_inset Quotes eld
\end_inset

A
\begin_inset Quotes erd
\end_inset

 is added to every residue which is without one
\end_layout

\begin_layout Standard
MutateX then writes each model in a separate PDB file.
 If the check phase has not been skipped the checked models are saved as
 PDB files in the working directory, with name 
\begin_inset Quotes eld
\end_inset

name_modelX_checked.pdb
\begin_inset Quotes erd
\end_inset

 (in our case, that would be 
\begin_inset Quotes eld
\end_inset

structure_model0_chcked.pdb
\begin_inset Quotes erd
\end_inset

).
 Otherwise, the 
\begin_inset Quotes eld
\end_inset

_checked
\begin_inset Quotes erd
\end_inset

 suffix is omitted.
\end_layout

\begin_layout Subsection
Phase 2: Repair
\end_layout

\begin_layout Standard
On each of the models saved as single PDB files in the previous section,
 a FoldX Repair run is performed, following the protocol detailed in the
 template file provided by the user.
 FoldX creates the 
\begin_inset Quotes eld
\end_inset

repair
\begin_inset Quotes erd
\end_inset

 directory, and each repair run is performed inside a subdirectory of this.
 For instance, in our example there would be only one repair directory under
 he 
\begin_inset Quotes eld
\end_inset

repair
\begin_inset Quotes erd
\end_inset

 one, which is named 
\begin_inset Quotes eld
\end_inset

repair_structure_model0_checked
\begin_inset Quotes erd
\end_inset

.
 Inside it, MutateX writes all the files that are necessary for the run
 and executes it automatically.
\end_layout

\begin_layout Standard
For instance, the following directory structure has to expected in our example:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
dirtree{% 
\end_layout

\begin_layout Plain Layout

 .1 CWD.
\end_layout

\begin_layout Plain Layout

 .2 repair.
 
\end_layout

\begin_layout Plain Layout

 .3 repair
\backslash
_structure
\backslash
_model0
\backslash
_checked.
 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Phase 3: Mutate
\end_layout

\begin_layout Standard
In this phase, the mutation runs are performed.
 A 
\begin_inset Quotes eld
\end_inset

mutations
\begin_inset Quotes erd
\end_inset

 directory is first created, under the CWD.
 Inside of it, a directory is created for every repair run which was succesfully
 completed in the previous phase.
 The directory name will derive from the output files written by FoldX in
 the repair runs - in our example, that would be 
\begin_inset Quotes eld
\end_inset

RepairPDB_structure_model0_checked
\begin_inset Quotes erd
\end_inset

.
 Finally, inside of these directories, several directories will be present,
 each corresponding to a protein residue and each containing a complete
 mutation runs.
 The naming of these directory will follow this convention: [Single-letter
 residue type of the wild-type residue][chain name][residue number].
 For instance, the following directory structure has to expected in our
 example:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
dirtree{% 
\end_layout

\begin_layout Plain Layout

 .1 CWD.
\end_layout

\begin_layout Plain Layout

 .2 mutations.
 
\end_layout

\begin_layout Plain Layout

 .3 RepairPDB
\backslash
_structure
\backslash
_model0
\backslash
_checked.
 
\end_layout

\begin_layout Plain Layout

 .4 MA1.
\end_layout

\begin_layout Plain Layout

 .4 AA2.
 
\end_layout

\begin_layout Plain Layout

 .4 TA3.
 
\end_layout

\begin_layout Plain Layout

 .4 EA4.
 
\end_layout

\begin_layout Plain Layout

 .4 LA5.
 
\end_layout

\begin_layout Plain Layout

 .4 EA6.
 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Phase 4: Report
\end_layout

\begin_layout Standard
After running all the mutations runs as detailed in Phase 3, the values
 of 
\begin_inset Formula $\Delta\Delta G$
\end_inset

 gathered from the mutation runs are written in text files.
 This happens in the 
\begin_inset Quotes eld
\end_inset

results
\begin_inset Quotes erd
\end_inset

 directory under CWD.
 Inside this, one directory per model used is found, and each of them contains
 several text files, named as mutation directories in the Mutate phase.
 Each of them contains a list of 
\begin_inset Formula $\Delta\Delta G$
\end_inset

 values (in kcal/mol), one for each residue type specified in the mutation_list.t
xt (or the default list if a file has not been specified) and in the same
 order.
 These values are the average of the N FoldX run that have been carried
 out for each mutation, as specified by the –nruns command line option (see
 section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Other-options"

\end_inset

).
\end_layout

\begin_layout Standard
Finally, inside the 
\begin_inset Quotes eld
\end_inset

results
\begin_inset Quotes erd
\end_inset

 diretory, a final_averages directory will also be present.
 This contains a number of text file, in the same exact format as the different
 result directories each referring to a single model.
 The values written in the files, however, represent the average 
\begin_inset Formula $\Delta\Delta G$
\end_inset

 across all the models analyzed.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
dirtree{% 
\end_layout

\begin_layout Plain Layout

 .1 CWD.
\end_layout

\begin_layout Plain Layout

 .2 results.
 
\end_layout

\begin_layout Plain Layout

 .3 RepairPDB
\backslash
_structure
\backslash
_model0
\backslash
_checked.
 
\end_layout

\begin_layout Plain Layout

 .3 final
\backslash
_averages.
 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Visualizing the output of MutateX
\end_layout

\begin_layout Standard
Visualization of MutateX output can be performed using a set of supplied
 tools for graphical representation.
 These include scripts for generating: heatmaps, stemplots, distribution-scatter
plots, boxplots, violinplots, mutation-specific histograms, matrices and
 Excel sheets of results for further analysis.
\end_layout

\begin_layout Subsection
Heatmap.
\end_layout

\begin_layout Standard
The ddg2matrix tool may be used to generate heatmaps of the calculated mutation
 ∆∆Gs.
 ddg2matrix is run by specifying the path to one of the “results” directory
 under CWD.
 The final_averages can be used or, if a specific protein model is of interest,
 the name of the model-file (see section 5.4).
 In addition to the results directory, the original model.pdb file and list
 of mutations must be supplied.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ddg2matrix -d results/final_averages 
\end_layout

\begin_layout Plain Layout

-p singel_model.pdb -l mutation_list.txt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
By default wildtype amino acids are represented on the y-axis and mutated-to
 amino acids on the x-axis, however, using the option -t (transpose) these
 may be swapped.
 Other user-specified options include:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

-o : Name of output image file.
\end_layout

\begin_layout Plain Layout

-i : Plot title.
\end_layout

\begin_layout Plain Layout

-c : Colormap of heatmap.
\end_layout

\begin_layout Plain Layout

-s : Number of residues for each single image.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For a full list of user specified options see the ddg2matrix help option.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ddg2matrix -h
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The example below shows the command for running ddg2matrix using 2KLZ, the
 tandem UIM domain of Ataxin-3.
 The mutation_list.txt is the default including all 20 natural occurring
 amino acids.
 Resulting heatmaps may be seen in figure 1, page 11.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ddg2matrix -d results/final_averages -p 2KLZ.pdb
\end_layout

\begin_layout Plain Layout

-l mutation_list.txt -o heatmaps -i my_heatmap -s 25   
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename 0_heatmap-1.png
	lyxscale 30
	scale 23

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename 1_heatmap-1.png
	lyxscale 30
	scale 23

\end_inset


\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Heatmaps generated from ddg2matrix run using 2KLZ.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Distribution plots.
\end_layout

\begin_layout Standard
The ddg2distribution tool can be used to generate a number of different
 tpyes of plots each visualizing the distribution of the mean protein ∆∆G
 for any mutated wildtype amino acid.
 It can generate a stempplot, a boxlot, a violinplot and a scatter plot.
 The stemplot depict the significance of a given wildtype amino acid for
 protein stability irrespectively of what it is mutated to.
 Errorbars (stems) represent the standard deviation of the mean.
 The boxplot shows the general distribution and outliers of the mean ∆∆G
 values for every mutation.
 The violinplot is similar to the boxplot but also shows a continuues vertical
 probability density plot of the data on each side of the figures.
 The scatterplot shows the exact values of the mean ∆∆G values for every
 mutation with labeled points on a vertical axis.
\end_layout

\begin_layout Standard
Ddg2distribution may be run using the same users-specified parameters as
 for ddg2matrix (see section 6.1 above).
 The path to the “results” directory (either final_averages or a specific
 protein model of interest), original model.pdb file and a list of mutations
 are mandatory parameters.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ddg2distribution -d results/final_averages 
\end_layout

\begin_layout Plain Layout

-p singel_model.pdb -l mutation_list.txt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Another mandatory parameter is the -T (--type) parameter.
 You use the -T (--type) parameter to pick which types of plots you want
 to generate.
 You have to select at least one type.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

-T stem box violin scatter
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For a full list of user specified options see the ddg2distribution help
 option.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ddg2distribution -h 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The example below shows the command for running ddg2distribution for all
 types of plots using 3I3C.
 The y-axis is being limited to +50 and -10 to give a better view of the
 resulting plots.
 The mutation_list.txt is the default including all 20 natural occurring
 amino acids.
 The resulting plots can be seen in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:stemplot"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:boxplot"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:violinplot"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:scatterplot"

\end_inset

 on pages 
\begin_inset CommandInset ref
LatexCommand pageref
reference "fig:stemplot"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand pageref
reference "fig:boxplot"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand pageref
reference "fig:violinplot"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand pageref
reference "fig:scatterplot"

\end_inset

 respectively.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ddg2distribution -p 
\end_layout

\begin_layout Plain Layout

3i3c_edit_model0_checked_Repair.pdb -d 
\end_layout

\begin_layout Plain Layout

/results/final_averages/ -l mutation_list.txt 
\end_layout

\begin_layout Plain Layout

-o distribution.png -s 25 -x 50 -n -10 
\end_layout

\begin_layout Plain Layout

-T stem box violin scatter
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename stem_4_distribution.png
	lyxscale 60
	scale 55

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:stemplot"

\end_inset

Stemplot generated from ddg2stemplot run using 3I3C.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename box_4_distribution.png
	lyxscale 60
	scale 55

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:boxplot"

\end_inset

Boxplot generated from ddg2stemplot run using 3I3C.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename violin_4_distribution.png
	lyxscale 60
	scale 55

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:violinplot"

\end_inset

Violinplot generated from ddg2distribution run using 3I3C.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename scatter_4_distribution.png
	lyxscale 60
	scale 55

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:scatterplot"

\end_inset

Scatterplot generated from ddg2stemplot run using 3I3C.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Histogram plots
\end_layout

\begin_layout Standard
The ddg2hist tool can be used to generate bar plots showing the distribution
 of mutatex ∆∆G values for every mutation in a specific wildtype amino acid.
 The user may define any number of wildtype amino acids to plot, as long
 as they are available in the predefined data set.
 Running the ddg2hist tool requires the same mandatory parameters as ddg2distrib
ution and ddg2matrix: the path to the “results” directory (either final_averages
 or a specific protein model of interest), original model.pdb file and a
 list of mutations.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ddg2hist -d results/final_averages 
\end_layout

\begin_layout Plain Layout

-p singel_model.pdb -l mutation_list.txt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To specify for which residues you want to generate a plot you use the -r
 parameter and a comma-separeted list of residues and residue ranges.
 A residue range can be defined by specifying two residues separated by
 a '-'.
 The example below shows some valid residue selections.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

-r AA14
\end_layout

\begin_layout Plain Layout

-r AA14,AB23,AD56
\end_layout

\begin_layout Plain Layout

-r AA14-AA60
\end_layout

\begin_layout Plain Layout

-r AA60-AA14
\end_layout

\begin_layout Plain Layout

-r AB23-WC45
\end_layout

\begin_layout Plain Layout

-r AA14,AD34,AB23-AC45,AA60
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ranges do not consider at the amino acid type so it does not matter what
 the first letter is, as long as it is a valid amino acid.
 If any residue in the data matches the range, it will be plotted.
 Residues have to be selected by simple single residue names.
 If a multimer contains atleast one of the selected residues, it will also
 be added.
 
\end_layout

\begin_layout Standard
For a full list of user specified options see the ddg2hist help option.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ddg2hist -h 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The example below shows the command for running ddg2hist on a small selection
 of residues using 3I3C.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ddg2hist -p 
\end_layout

\begin_layout Plain Layout

3i3c_edit_model0_checked_Repair.pdb -d 
\end_layout

\begin_layout Plain Layout

/results/final_averages/ -l mutation_list.txt 
\end_layout

\begin_layout Plain Layout

-r AA16-AA30,AD16
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This resulted in a total of 16 plots.
 You can see 3 of the plots in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:histogram"

\end_inset

 on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "fig:histogram"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{-3.5cm}
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename AB16_AD16_histogram.png
	lyxscale 55
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename GA18_histogram.png
	lyxscale 55
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename IA28_histogram.png
	lyxscale 55
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:histogram"

\end_inset

Barplot of AB16_AD16, GA18 and IA28 ∆∆G values generated from ddg2hist using
 3I3C.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
PDB file and matrix file.
 
\end_layout

\begin_layout Standard
The ddg2pdb tool can be used to analyse ∆∆G differences by plotting them
 as b-factors in PDB files, as well as writing input files compatible with
 the xPyder PyMOL plugin.
 Running ddg2pdb requires the path to the “results” directory (either final_aver
ages or a specific protein model of interest), original model.pdb file and
 list of mutations.
 Additionally, an upper and lower cut-off of protein ∆∆G is needed, as the
 tool will save for each residue the number of mutations which are within
 the specified parameters.
 Default cut-off values are: lower = -99999.0 and upper = 99999.0.
 If the ddg2pdb option -t is set to "between" the tool will extract the
 values between upper and lower.
 Alternatively -t may be set to "outside" specifying that everything < then
 the lower cut-off and/or everything  > than the upper sould be included.
\end_layout

\begin_layout Standard
For full list of user specified options see the ddg2pdb help option.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ddg2pdb -h 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The example below shows the command for running ddg2pdb using 2KLZ, the
 tandem UIM domain of Ataxin-3.
 The mutation_list.txt is the default including all 20 natural occurring
 amino acids.
 Cut-offs are set to between lower = 3.0 and upper = 99999.0 in order to capture
 only the mutations which leads to a destabilising free energy of > 3.0.
  
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ddg2pdb -d results/final_averages -i 2KLZ.pdb -a 3.0 
\end_layout

\begin_layout Plain Layout

-b 99999.0 -t between -l mutation_list.txt 
\end_layout

\begin_layout Plain Layout

-o my_scanned.pdb -m my_scanned.mat   
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The output generated by ddg2pdb is a pdb structure file and a corresponding
 .dat matrix, which may be visualised with the xPyder plugin for PyMOL, available
 at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/ELELAB/xpyder
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Excel Sheet
\end_layout

\begin_layout Standard
ddg2xlsx is a tool for writing out results in an excel sheet as a table.
 The table has the same basic strucutre as for the ddg2matrix tool, however
 the values are written in a Excel file to be further modified.
 A typical command line for this tool is: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ddg2xlsx -d results/final_averages -p simple_model.pdb
\end_layout

\begin_layout Plain Layout

-l mutation_list.txt -o my_excel_sheet   
\end_layout

\end_inset


\end_layout

\begin_layout Section
FAQ
\end_layout

\begin_layout Subsubsection*
Q: Would it be possible to include non-standard (for instance, phosphorilated)
 residues in the mutation list?
\end_layout

\begin_layout Standard
A: This is not possible at the moment, but we might consider it for the
 future.
\end_layout

\begin_layout Subsubsection*
Q: Is it possible to mutate DNA bases as well?
\end_layout

\begin_layout Standard
A: This is not possible at the moment, but we might consider it for the
 future.
\end_layout

\end_body
\end_document
