
import glob
import re
import numpy as np
import os
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot
from matplotlib import cm
from scipy import stats
import argparse
import logging as log





parser = argparse.ArgumentParser(
description='FoldX Stemplot',)

cmaps_list = [m for m in cm.datad if not m.endswith("_r")]

parser.add_argument("-d","--data-directory", dest="input_path", type=str, help="input data directory")
parser.add_argument("-o","--output", dest="outfile", type=str, default='stemplot')
parser.add_argument("-i","--title", dest='title', type=str, default='stemplot', help="Title for the output image file")
parser.add_argument("-c","--color-map",dest='cmap', type=unicode, default="YlGnBu", help="Color map used to plot the DDG values (choose from: %s)" % ", ".join(cmaps_list))
parser.add_argument("-s","--splice",dest='sv',action='store', type=int, default=1, help="Number of residues for each single image")

options = parser.parse_args()





def wt_names(input_path, sv):
    IDs = []
    l_IDs = []
    pattern = re.compile('[^/]+$')
    try:
        for dir in glob.iglob(os.path.join(input_path, '*')):
            p = re.search(pattern, dir)
            IDs.append(p.group(0))
        as_array = np.array_split(np.array(IDs), int(sv))
        for i in range(len(as_array)):
            new = as_array[i].tolist()
            l_IDs.append(new)
        return (l_IDs)
    except:
        log.error("Couldn't open or parse input directory. Please check path and format of result files. Exiting...")
        exit(1)





def format_data(input_path, sv):
    try:
        empty = []
        for file in glob.iglob(os.path.join(input_path, '*')):
            with open(file) as f:
                alist = [float(line.rstrip()) for line in f]
                empty.append(alist)
                f.close()
        avg = []
        for list in empty:
            mean_vals = float(sum(list)/len(list))
            avg.append(mean_vals)
        stderrmean = []
        for list in empty:
            ste = stats.sem(list)
            stderrmean.append(ste)
        i_index =[]
        for i, j in enumerate(avg):
            iflo = float(i)
            i_index.append(iflo)
        data = np.array([i_index, avg, stderrmean])
        subarray = np.array_split(data, int(sv), axis=1)
        return(subarray)
    except:
        log.error("Couldn't open or parse input directory. Please check path and format of result files. Exiting...")
        exit(1)






def stemplot(input_path, outfile, cmap, title, sv):
    subarray = format_data(input_path, sv)
    for i in range(len(subarray)):
        matplotlib.pyplot.style.use('ggplot')
        fig = matplotlib.pyplot.figure()
        ax = matplotlib.pyplot.subplot(111)
        sc = ax.scatter(subarray[i][0], subarray[i][1], s=subarray[i][1]*150, c=subarray[i][1], marker='o', edgecolors='grey', cmap=cm.get_cmap(cmap), alpha=1)
        ax.errorbar(subarray[i][0], subarray[i][1], yerr=subarray[i][2], ls='None', color='grey')
        ax.set_title(title)
        ax.set_xlabel('Wild-type Amino Acids')
        ax.set_ylabel('Free Energy')
        matplotlib.pyplot.xticks(subarray[i][0], wt_names(input_path, sv)[i], rotation='vertical')
        matplotlib.pyplot.colorbar(sc)
        matplotlib.pyplot.savefig(outfile+'_%s.pdf' %i, bbox_inches='tight')
        matplotlib.pyplot.clf()




stemplot(options.input_path, options.outfile, options.cmap, options.title, options.sv)

