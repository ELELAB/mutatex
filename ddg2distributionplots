#!/usr/bin/env python

#    ddg2distributionplots: plot DDG MutateX results as distribution plots: boxplot, violinplot or scatterplot.
#    Copyright (C) 2015, Matteo Tiberti <matteo.tiberti@gmail.com, Tycho Canter Cremers <tycho.c.c@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import matplotlib
matplotlib.use('PDF')

def get_residue_list(structure, multimers=True):

    models = structure.get_list()

    if len(models) > 1:
        log.warning("%d models are present in the input PDB file; only the first will be used." % len(models))
    if len(models) < 1:
        log.error("The input PDB file does not contain any model. Exiting ...")
        exit(1)

    model = models[0]

    residue_list = []
    sequences = {}

    for chain in model:
        chain_name = chain.get_id()
        sequences[chain_name] = ''
        for residue in chain:
            try:
                res_code = PDB.Polypeptide.three_to_one(residue.get_resname())
            except:
                log.warning("Residue %s in file %s couldn't be recognized; it will be skipped" %(residue, options.pdb))
                continue
            if not multimers:
                residue_list.append(("%s%s%d") % (res_code, chain.get_id(), residue.get_id()[1]))
            else:
                sequences[chain_name] += res_code

    if options.multimers:
        collated_chains = []
        seq_ids, seqs = zip(*list(sequences.iteritems()))
        seq_ids = np.array(seq_ids)
        unique_seqs, unique_idxs = np.unique(seqs, return_inverse=True)

        for i in np.unique(unique_idxs):
            collated_chains.append(seq_ids[unique_idxs == i])

        for cg in collated_chains:
            for model in structure:
                for residue in model[cg[0]]:
                    resid = residue.get_id()[1]
                    try:
                        res_code = PDB.Polypeptide.three_to_one(residue.get_resname())
                    except:
                        log.warning("Residue %s in file %s couldn't be recognized; it will be skipped" %(residue, options.pdb))
                        continue
                    residue_list.append(tuple([ "%s%s%d" % (res_code, c, resid) for c in cg ]))
    return residue_list

def parse_ddg_file(fname, reslist):
    try:
        fh = open(fname, 'r')
    except:
        log.warning("file %s cannot be opened." % fname)
        return None

    ddgs = []
    for line in fh:
        if line and not line.startswith("#"):
            ddgs.append(float(line.split()[0]))

    if len(ddgs) != len(reslist):
        log.error("file %s has %d values, with %d required. Exiting..." % (fname, len(ddgs), options.values))
        exit(1)
    return ddgs

def parse_list_file(fname):
    fh = open(fname, 'r')
    restypes = []
    for line in fh:
        if line and not line.startswith("#"):
            restypes.append(line.strip()[0])
    return restypes

############Plot functions########################
def plot_box(mat, xlabels, vmin, vmax, title=None, fontsize=8):
    xt = xlabels
    xticks = np.arange(1,mat.shape[1]+1)
    if title is None:
        title = ""

    plt.title("Box plot - " + title)
    
    box = plt.boxplot(mat)
    plt.ylim(vmin, vmax)

    plt.xlabel("Residue id")
    plt.ylabel(r'FoldX $\Delta\Delta{}G (kcal/mol)$')
    rotation_xt=90
    plt.xticks(xticks,xt,rotation=rotation_xt,size=fontsize)
    
def plot_violin(mat, xlabels, vmin, vmax, title=None, fontsize=8):
    xt = xlabels
    xticks = np.arange(1,mat.shape[1]+1)
    if title is None:
        title = ""

    plt.title("Violoin plot - " + title)
     
    violin = plt.violinplot(mat, 
                            xticks, 
                            showmeans = True, 
                            showextrema = True, 
                            showmedians = True, 
                            points = 100, 
                            bw_method='scott')
    plt.ylim(vmin, vmax)
    
    plt.xlabel("Residue id")
    plt.ylabel(r'FoldX $\Delta\Delta{}G (kcal/mol)$')
    rotation_xt=90
    plt.xticks(xticks,xt,rotation=rotation_xt,size=fontsize)
    plt.xlim(0,mat.shape[1]+1)
    
    
    
def plot_scatter(mat, xlabels, res_order, vmin, vmax, title=None, fontsize=8):
    xt = xlabels
    xticks = np.arange(1,mat.shape[1]+1)
    if title is None:
        title = ""

    plt.title("Scatter plot - " + title)
    plt.ylim(-5, )
    
    #Plot graph
    for i in range(len(res_order)):
        plt.scatter(xticks, mat[i])
    
    
    plt.ylim(vmin, vmax)
    
    #Calculate non-overlapping label coordinates    
    fig_height = plt.gcf().get_figheight()
    y_range = abs(plt.ylim()[0] - plt.ylim()[1])
    fontsize_inch = (float(1) / 72) * 12    #label font size in inches
    label_size = (y_range / fig_height) * fontsize_inch
    
    for residue in mat.T:
        for i in range(len(residue)):
            for j in range(len(residue)):
                diff = abs(residue[i] - residue[j])
                if(diff < label_size and i is not j): #Check for overlap
                    offset = label_size - diff
                    if(residue[i] > residue[j]):    #Devide offset between points
                        residue[i] += offset/2
                        residue[j] -= offset/2
                    else:
                        residue[i] -= offset/2
                        residue[j] += offset/2
    
    #Add labels
    x_offset = float(len(xticks)) / 270
    for i in range(len(res_order)):
        res = res_order[i]        
        for j in xticks:
            plt.annotate(res, (j + x_offset, mat[i][j-1]), fontsize = 12)
    
    plt.xlabel("Residue id")
    plt.ylabel(r'FoldX $\Delta\Delta{}G (kcal/mol)$')
    rotation_xt=90
    plt.xticks(xticks,xt,rotation=rotation_xt,size=fontsize)
    plt.xlim(0,mat.shape[1]+1)

################################################


def splice_data(data, labels, sv):

    out = []

    if data.shape[1] <= sv:
        return [[data, labels]]

    nsplice = data.shape[1] / int(sv)
    rest =    data.shape[1] % int(sv)

    if rest != 0:
        nsplice += 1

    for i in range(nsplice):
        out.append([
                data[:,i*sv:(i+1)*sv],
                labels[i*sv:(i+1)*sv]
            ])

    return out



three2one = {'ALA':'A',
             'CYS':'C',
             'ASP':'D',
             'GLU':'E',
             'PHE':'F',
             'GLY':'G',
             'HIS':'H',
             'ILE':'I',
             'LYS':'K',
             'LEU':'L',
             'MET':'M',
             'ASN':'N',
             'PRO':'P',
             'GLN':'Q',
             'ARG':'R',
             'SER':'S',
             'THR':'T',
             'VAL':'V',
             'TRP':'W',
             'TYR':'Y'}

LOGFMT = "%(levelname)s: %(message)s"

if not __name__ == "__main__":
    exit()


parser = argparse.ArgumentParser( 
    description='ddg2distributionplots: plot DDG MutateX results as distribution plots: boxplot, violinplot or scatterplot.',)

parser.add_argument("-p","--pdb", dest="in_pdb", help="Input pdb file")
parser.add_argument("-d","--data-directory", dest="dir", type=str, help="input data directory")
parser.add_argument("-m","--include-invalid-files",dest='includeblank',action='store_true', default=False, help="Include empty columns in output instead of ignoring missing files")
parser.add_argument("-l","--order-list", dest="order",  help="default order list")
parser.add_argument("-v","--verbose", dest="verbose", action="store_true", default=False, help="verbose mode")
parser.add_argument("-o","--output", dest="outfile", action='store', default='energies.pdf')
parser.add_argument("-n","--min", dest='vmin',action='store',default=None,type=float,help="Minimum value to be plotted")
parser.add_argument("-x","--max", dest='vmax',action='store',default=None,type=float,help="Maximum value to be plotted")
parser.add_argument("-i","--title", dest='title', action='store', default=None, type=str, help="Title for the output image file")
parser.add_argument("-s","--splice",dest='sv',action='store', type=int, default=20, help="Number of residues for each single image")
parser.add_argument("-f","--fontsize",dest='fontsize',action='store', type=int, default=8, help="Axis label font size")
parser.add_argument("-a","--multimers", dest="multimers", default=True, action='store_false')
parser.add_argument("-B","--Boxplot", dest="box", default=False, action='store_true', help = "Create box plots from the data.")
parser.add_argument("-V","--Violinplot", dest="violin", default=False, action='store_true', help = "Create violin plots from the data.")
parser.add_argument("-S","--Scatterplot", dest="scatter", default=False, action='store_true', help = "Create scatter plots from the data.")

options = parser.parse_args()

import numpy as np
import logging as log
from Bio import PDB
from matplotlib import pyplot as plt

if options.verbose:
    log.basicConfig(level=log.INFO,    format=LOGFMT)
else:
    log.basicConfig(level=log.WARNING, format=LOGFMT)


res_order = parse_list_file(options.order)

log.info("Residues list is:")
for i,r in enumerate(res_order):
    log.info("%d\t%s" % (i,r))

pdb_parser = PDB.PDBParser()

try:
    structure = pdb_parser.get_structure('s', options.in_pdb)
except:
    log.error("Couldn't open or parse input pdb file. Exiting...")
    exit(1)

res_ids = []
res_ids_str = []
data = []

res_ids_str = get_residue_list(structure, multimers=options.multimers)
fnames = ["_".join(r) for r in res_ids_str]
res_id_labels = [", ".join(r) for r in res_ids_str]

for fname in fnames:
    this_data = parse_ddg_file("%s/%s" % (options.dir, fname), reslist=res_order)
    if this_data:
        data.append(np.array(this_data))
        continue
    elif options.includeblank:
        this_data = np.empty((len(res_order)))
        this_data[:] = np.NAN
        data.append(this_data)
    else:
        res_ids.pop()
        res_ids_str.pop()

data = np.vstack(tuple(data)).T



if not options.vmax:
    options.vmax = np.max(data)
if not options.vmin:
    options.vmin = np.min(data)

spliced_data = splice_data(data, res_id_labels, options.sv)

#Plot the plots
for i in range(len(spliced_data)):
    if(options.violin):
        plot_violin(spliced_data[i][0], 
                    spliced_data[i][1], 
                    options.vmin,
                    options.vmax, 
                    title=options.title,
                    fontsize=options.fontsize)
        plt.savefig("violin_%d_%s" %(i, options.outfile))
        plt.clf()
    
    if(options.box):
        plot_box(spliced_data[i][0],
                spliced_data[i][1], 
                options.vmin ,options.vmax, 
                title=options.title, 
                fontsize=options.fontsize)
        plt.savefig("box_%d_%s" %(i, options.outfile))
        plt.clf()
    
    if(options.scatter):
        plot_scatter(spliced_data[i][0], 
                     spliced_data[i][1], 
                     res_order, 
                     options.vmin,
                     options.vmax, 
                     title=options.title, 
                     fontsize=options.fontsize)
        plt.savefig("scatter_%d_%s" %(i, options.outfile))
        plt.clf()
    print "Plot: " + str(i + 1) + "/" + str(len(spliced_data))
    